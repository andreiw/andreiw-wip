From be0327a64d38f59492f1d5f7400b6822db5fe3b4 Mon Sep 17 00:00:00 2001
From: Andrei Warkentin <andreiw@motorola.com>
Date: Tue, 24 May 2011 05:34:53 -0500
Subject: [PATCH] GDB: Initial prototype of symbol file scope ("module scope" in other debuggers).

More or less works, you can do stuff like -
print &'DxeCore.dll'::gST

Scoping works from current scope, so as you would expect, doing above
command in a deeper stack frame from a different EFI module would
result in the expected resulted (gST from that module).

Added list-symbol-files command, which will be renamed "info symfiles".

Signed-off-by: Andrei Warkentin <andreiw@motorola.com>
---
 gdb/c-exp.y     |   18 +++++-
 gdb/completer.c |   22 ++++++-
 gdb/linespec.c  |   15 ++++-
 gdb/objfiles.c  |   52 ++++++++++++++++
 gdb/objfiles.h  |    3 +
 gdb/symfile.c   |   30 +++++++++
 gdb/symtab.c    |  176 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 gdb/symtab.h    |    2 +
 8 files changed, 306 insertions(+), 12 deletions(-)

diff --git a/gdb/c-exp.y b/gdb/c-exp.y
index 845771c..09a06ea 100644
--- a/gdb/c-exp.y
+++ b/gdb/c-exp.y
@@ -2375,10 +2375,22 @@ yylex (void)
 	return BLOCKNAME;
       }
     else if (!sym)
-      {				/* See if it's a file name. */
-	struct symtab *symtab;
+      {
+	struct symtab *symtab = NULL;
+	struct objfile *objfile = NULL;
 
-	symtab = lookup_symtab (copy);
+	/* See if it's a symbol file name. */
+	objfile = lookup_objfile (copy);
+	if (objfile)
+	  {
+	    PSYMTAB_TO_SYMTAB (objfile->psymtabs);
+	    symtab = objfile->symtabs;
+	  }
+	else
+	  {
+		/* See if it's a file name. */
+	    symtab = lookup_symtab (copy);
+	  }
 
 	if (symtab)
 	  {
diff --git a/gdb/completer.c b/gdb/completer.c
index 53275c0..becaf69 100644
--- a/gdb/completer.c
+++ b/gdb/completer.c
@@ -199,9 +199,10 @@ filename_completer (struct cmd_list_element *ignore, char *text, char *word)
 char **
 location_completer (struct cmd_list_element *ignore, char *text, char *word)
 {
-  int n_syms = 0, n_files = 0;
+  int n_syms = 0, o_syms = 0, n_files = 0;
   char ** fn_list = NULL;
   char ** list = NULL;
+  char ** obj_sym_list = NULL;
   char *p;
   int quote_found = 0;
   int quoted = *text == '\'' || *text == '"';
@@ -272,6 +273,8 @@ location_completer (struct cmd_list_element *ignore, char *text, char *word)
      symbols as well as on files.  */
   if (colon)
     {
+      obj_sym_list = make_objfile_symbol_completion_list (symbol_start,
+                                                          word, file_to_match);
       list = make_file_symbol_completion_list (symbol_start, word,
 					       file_to_match);
       xfree (file_to_match);
@@ -281,12 +284,15 @@ location_completer (struct cmd_list_element *ignore, char *text, char *word)
       list = make_symbol_completion_list (symbol_start, word);
       /* If text includes characters which cannot appear in a file
 	 name, they cannot be asking for completion on files.  */
-      if (strcspn (text, 
+      if (strcspn (text,
 		   gdb_completer_file_name_break_characters) == text_len)
 	fn_list = make_source_files_completion_list (text, text);
     }
 
-  /* How many completions do we have in both lists?  */
+  /* How many completions do we have in all lists?  */
+  if (obj_sym_list)
+    for ( ; obj_sym_list[o_syms]; o_syms++)
+      ;
   if (fn_list)
     for ( ; fn_list[n_files]; n_files++)
       ;
@@ -294,6 +300,16 @@ location_completer (struct cmd_list_element *ignore, char *text, char *word)
     for ( ; list[n_syms]; n_syms++)
       ;
 
+  /* Catenate obj_sym_list with list */
+  if (o_syms)
+    {
+      list = xrealloc (list, (n_syms + o_syms + 1) * sizeof (char *));
+      memcpy (list + n_syms, obj_sym_list, (o_syms + 1) * sizeof (char *));
+      xfree (obj_sym_list);
+      n_syms += o_syms;
+      o_syms = 0;
+    }
+
   /* Make list[] large enough to hold both lists, then catenate
      fn_list[] onto the end of list[].  */
   if (n_syms && n_files)
diff --git a/gdb/linespec.c b/gdb/linespec.c
index 75a74e2..cfcd55e 100644
--- a/gdb/linespec.c
+++ b/gdb/linespec.c
@@ -1568,7 +1568,8 @@ symtab_from_filename (char **argptr, char *p, int is_quote_enclosed,
   char *p1;
   char *copy;
   struct symtab *file_symtab;
-  
+  struct objfile *objfile;
+
   p1 = p;
   while (p != *argptr && p[-1] == ' ')
     --p;
@@ -1583,7 +1584,14 @@ symtab_from_filename (char **argptr, char *p, int is_quote_enclosed,
     copy[p - *argptr] = 0;
 
   /* Find that file's data.  */
-  file_symtab = lookup_symtab (copy);
+  objfile = lookup_objfile (copy);
+  if (objfile)
+    {
+      PSYMTAB_TO_SYMTAB (objfile->psymtabs);
+      file_symtab = objfile->symtabs;
+    }
+  if (file_symtab == NULL)
+    file_symtab = lookup_symtab (copy);
   if (file_symtab == 0)
     {
       if (not_found_ptr)
@@ -1591,7 +1599,8 @@ symtab_from_filename (char **argptr, char *p, int is_quote_enclosed,
       if (!have_full_symbols () && !have_partial_symbols ())
 	throw_error (NOT_FOUND_ERROR,
 		     _("No symbol table is loaded.  Use the \"file\" command."));
-      throw_error (NOT_FOUND_ERROR, _("No source file named %s."), copy);
+      throw_error (NOT_FOUND_ERROR, _("No source or symbol file named %s."),
+                   copy);
     }
 
   /* Discard the file name from the arg.  */
diff --git a/gdb/objfiles.c b/gdb/objfiles.c
index c2763c2..025bbbf 100644
--- a/gdb/objfiles.c
+++ b/gdb/objfiles.c
@@ -28,6 +28,7 @@
 #include "symtab.h"
 #include "symfile.h"
 #include "objfiles.h"
+#include "filenames.h"
 #include "gdb-stabs.h"
 #include "target.h"
 #include "bcache.h"
@@ -53,6 +54,57 @@
 #include "observer.h"
 #include "complaints.h"
 
+struct objfile *
+lookup_objfile (const char *name)
+{
+  struct objfile *objfile;
+  char *real_path = NULL;
+  char *full_path = NULL;
+  char *found = NULL;
+
+  /* Here we are interested in canonicalizing an absolute path, not
+     absolutizing a relative path.  */
+  if (IS_ABSOLUTE_PATH (name))
+    {
+      full_path = xfullpath (name);
+      make_cleanup (xfree, full_path);
+      real_path = gdb_realpath (name);
+      make_cleanup (xfree, real_path);
+    }
+
+  ALL_OBJFILES (objfile)
+    {
+      if (FILENAME_CMP (name, objfile->name) == 0)
+        {
+          return objfile;
+        }
+
+      if (full_path != NULL)
+        {
+          if (FILENAME_CMP (full_path, xfullpath (objfile->name)) == 0)
+            {
+              return objfile;
+            }
+        }
+      if (real_path != NULL)
+        {
+          if (FILENAME_CMP (real_path, gdb_realpath (objfile->name)) == 0)
+            {
+              return objfile;
+            }
+        }
+    }
+
+  if (lbasename (name) == name)
+  ALL_OBJFILES (objfile)
+    {
+      if (FILENAME_CMP (lbasename (objfile->name), name) == 0)
+        return objfile;
+    }
+
+  return NULL;
+}
+
 /* Prototypes for local functions */
 
 static void objfile_alloc_data (struct objfile *objfile);
diff --git a/gdb/objfiles.h b/gdb/objfiles.h
index c689622..137264b 100644
--- a/gdb/objfiles.h
+++ b/gdb/objfiles.h
@@ -533,6 +533,9 @@ extern void *objfile_data (struct objfile *objfile,
 
 extern struct bfd *gdb_bfd_ref (struct bfd *abfd);
 extern void gdb_bfd_unref (struct bfd *abfd);
+
+struct objfile *lookup_objfile (const char *name);
+
 
 
 /* Traverse all object files in the current program space.
diff --git a/gdb/symfile.c b/gdb/symfile.c
index 9c28fb0..77549ef 100644
--- a/gdb/symfile.c
+++ b/gdb/symfile.c
@@ -2012,6 +2012,33 @@ print_transfer_performance (struct ui_file *stream,
   ui_out_text (uiout, ".\n");
 }
 
+/* List loaded symbol files .*/
+static void
+list_symbol_files (char *args, int from_tty)
+{
+  struct objfile *objfile;
+  struct obj_section *osect;
+
+  ALL_OBJFILES (objfile)
+    {
+      struct gdbarch *gdbarch = get_objfile_arch (objfile);
+      printf_filtered("Symbol file: %s\n", objfile->name);
+      ALL_OBJFILE_OSECTIONS (objfile, osect)
+        {
+          const char *name;
+          bfd_vma vma;
+          int size;
+
+          vma = bfd_section_vma (objfile->obfd, osect->the_bfd_section);
+          size = bfd_get_section_size (osect->the_bfd_section);
+          name = bfd_section_name (objfile->obfd, osect->the_bfd_section);
+          printf_filtered ("\tSection %s, loaded at ", name);
+          puts_filtered (paddress (gdbarch, vma));
+          puts_filtered ("\n");
+        }
+    }
+}
+
 /* This function allows the addition of incrementally linked object files.
    It does not modify any state in the target, only in the debugger.  */
 /* Note: ezannoni 2000-04-13 This function/command used to have a
@@ -3803,6 +3830,9 @@ _initialize_symfile (void)
 {
   struct cmd_list_element *c;
 
+  c = add_cmd ("list-symbol-files", class_files, list_symbol_files, _("\
+List loaded symbol files\n."), &cmdlist);
+
   c = add_cmd ("symbol-file", class_files, symbol_file_command, _("\
 Load symbol table from executable file FILE.\n\
 The `file' command can also load symbol tables, as well as setting the file\n\
diff --git a/gdb/symtab.c b/gdb/symtab.c
index e69edb9..0d3ebc8 100644
--- a/gdb/symtab.c
+++ b/gdb/symtab.c
@@ -1720,9 +1720,18 @@ lookup_symbol_global (const char *name,
   /* Call library-specific lookup procedure.  */
   objfile = lookup_objfile_from_block (block);
   if (objfile != NULL)
-    sym = solib_global_lookup (objfile, name, linkage_name, domain);
-  if (sym != NULL)
-    return sym;
+    {
+      sym = lookup_global_symbol_from_objfile (objfile,
+                                               name,
+                                               linkage_name,
+                                               domain);
+      if (sym != NULL)
+        return sym;
+
+      sym = solib_global_lookup (objfile, name, linkage_name, domain);
+      if (sym != NULL)
+        return sym;
+    }
 
   sym = lookup_symbol_aux_symtabs (GLOBAL_BLOCK, name, linkage_name, domain);
   if (sym != NULL)
@@ -4083,6 +4092,167 @@ default_make_symbol_completion_list (char *text, char *word)
   return (return_val);
 }
 
+char **
+make_objfile_symbol_completion_list (char *text, char *word, char *objname)
+{
+  /* Problem: All of the symbols have to be copied because readline
+     frees them.  I'm not going to worry about this; hopefully there
+     won't be that many.  */
+
+  struct symbol *sym;
+  struct symtab *s;
+  struct partial_symtab *ps;
+  struct minimal_symbol *msymbol;
+  struct objfile *objfile;
+  struct block *b;
+  /* const struct block *surrounding_static_block, *surrounding_global_block; */
+  struct dict_iterator iter;
+  struct partial_symbol **psym;
+  /* The symbol we are completing on.  Points in same buffer as text.  */
+  char *sym_text;
+  /* Length of sym_text.  */
+  int sym_text_len;
+
+  objfile = lookup_objfile (objname);
+  if (!objfile)
+    /* No such loaded symbol file. */
+    {
+      return_val = (char **) xmalloc (sizeof (char *));
+      return_val[0] = NULL;
+      return return_val;
+    }
+
+  /* Now look for the symbol we are supposed to complete on.  */
+  {
+    char *p;
+    char quote_found;
+    char *quote_pos = NULL;
+
+    /* First see if this is a quoted string.  */
+    quote_found = '\0';
+    for (p = text; *p != '\0'; ++p)
+      {
+	if (quote_found != '\0')
+	  {
+	    if (*p == quote_found)
+	      /* Found close quote.  */
+	      quote_found = '\0';
+	    else if (*p == '\\' && p[1] == quote_found)
+	      /* A backslash followed by the quote character
+	         doesn't end the string.  */
+	      ++p;
+	  }
+	else if (*p == '\'' || *p == '"')
+	  {
+	    quote_found = *p;
+	    quote_pos = p;
+	  }
+      }
+    if (quote_found == '\'')
+      /* A string within single quotes can be a symbol, so complete on it.  */
+      sym_text = quote_pos + 1;
+    else if (quote_found == '"')
+      /* A double-quoted string is never a symbol, nor does it make sense
+         to complete it any other way.  */
+      {
+	return_val = (char **) xmalloc (sizeof (char *));
+	return_val[0] = NULL;
+	return return_val;
+      }
+    else
+      {
+	/* It is not a quoted string.  Break it based on the characters
+	   which are in symbols.  */
+	while (p > text)
+	  {
+	    if (isalnum (p[-1]) || p[-1] == '_' || p[-1] == '\0'
+		|| p[-1] == ':')
+	      --p;
+	    else
+	      break;
+	  }
+	sym_text = p;
+      }
+  }
+
+  sym_text_len = strlen (sym_text);
+
+  return_val_size = 100;
+  return_val_index = 0;
+  return_val = (char **) xmalloc ((return_val_size + 1) * sizeof (char *));
+  return_val[0] = NULL;
+
+  /* Look through the partial symtabs for all symbols which begin
+     by matching SYM_TEXT.  Add each one that you find to the list.  */
+
+  ALL_OBJFILE_PSYMTABS (objfile, ps)
+  {
+    /* If the psymtab's been read in we'll get it when we search
+       through the blockvector.  */
+    if (ps->readin)
+      continue;
+
+    for (psym = objfile->global_psymbols.list + ps->globals_offset;
+	 psym < (objfile->global_psymbols.list + ps->globals_offset
+		 + ps->n_global_syms);
+	 psym++)
+      {
+	/* If interrupted, then quit. */
+	QUIT;
+	COMPLETION_LIST_ADD_SYMBOL (*psym, sym_text, sym_text_len, text, word);
+      }
+
+    for (psym = objfile->static_psymbols.list + ps->statics_offset;
+	 psym < (objfile->static_psymbols.list + ps->statics_offset
+		 + ps->n_static_syms);
+	 psym++)
+      {
+	QUIT;
+	COMPLETION_LIST_ADD_SYMBOL (*psym, sym_text, sym_text_len, text, word);
+      }
+  }
+
+  /* At this point scan through the misc symbol vectors and add each
+     symbol you find to the list.  Eventually we want to ignore
+     anything that isn't a text symbol (everything else will be
+     handled by the psymtab code above).  */
+
+  ALL_OBJFILE_MSYMBOLS (objfile, msymbol)
+  {
+    QUIT;
+    COMPLETION_LIST_ADD_SYMBOL (msymbol, sym_text, sym_text_len, text, word);
+
+    completion_list_objc_symbol (msymbol, sym_text, sym_text_len, text, word);
+  }
+
+  /* Go through the symtabs and check the externs and statics for
+     symbols which match.  */
+
+  ALL_OBJFILE_SYMTABS (objfile, s)
+    if ((s)->primary)
+      {
+        QUIT;
+        b = BLOCKVECTOR_BLOCK (BLOCKVECTOR (s), GLOBAL_BLOCK);
+        ALL_BLOCK_SYMBOLS (b, iter, sym)
+        {
+          COMPLETION_LIST_ADD_SYMBOL (sym, sym_text, sym_text_len, text, word);
+        }
+      }
+
+  ALL_OBJFILE_SYMTABS (objfile, s)
+    if ((s)->primary)
+      {
+        QUIT;
+        b = BLOCKVECTOR_BLOCK (BLOCKVECTOR (s), STATIC_BLOCK);
+        ALL_BLOCK_SYMBOLS (b, iter, sym)
+        {
+          COMPLETION_LIST_ADD_SYMBOL (sym, sym_text, sym_text_len, text, word);
+        }
+      }
+
+  return (return_val);
+}
+
 /* Return a NULL terminated array of all symbols (regardless of class)
    which begin by matching TEXT.  If the answer is no symbols, then
    the return value is an array which contains only a NULL pointer.  */
diff --git a/gdb/symtab.h b/gdb/symtab.h
index 167dfe8..b06d6f2 100644
--- a/gdb/symtab.h
+++ b/gdb/symtab.h
@@ -1292,6 +1292,8 @@ extern char **make_symbol_completion_list (char *, char *);
 extern char **make_symbol_completion_list_fn (struct cmd_list_element *,
 					      char *, char *);
 
+extern char **make_objfile_symbol_completion_list (char *, char *, char *);
+
 extern char **make_file_symbol_completion_list (char *, char *, char *);
 
 extern char **make_source_files_completion_list (char *, char *);
-- 
1.7.0.4

