From bd9cd5410427e5b190f32b270aee45bdf6a43878 Mon Sep 17 00:00:00 2001
From: Andrei Warkentin <andrey.warkentin@gmail.com>
Date: Sun, 25 Sep 2011 04:06:19 -0400
Subject: [PATCH 3/3] MMP2: First glimpses of FIQ debugger pdev.

Turned on for XO-1.75.

Needs to be filled in with actual UART code.

Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com>
---
 arch/arm/include/asm/fiq_debugger.h   |   42 +++++++++++
 arch/arm/mach-mmp/Kconfig             |    9 ++-
 arch/arm/mach-mmp/Makefile            |    1 +
 arch/arm/mach-mmp/include/mach/mmp2.h |    8 ++
 arch/arm/mach-mmp/mmp2_fiq_debugger.c |  128 +++++++++++++++++++++++++++++++++
 arch/arm/mach-mmp/olpc-xo-1-75.c      |    2 +
 6 files changed, 189 insertions(+), 1 deletions(-)
 create mode 100644 arch/arm/include/asm/fiq_debugger.h
 create mode 100644 arch/arm/mach-mmp/mmp2_fiq_debugger.c

diff --git a/arch/arm/include/asm/fiq_debugger.h b/arch/arm/include/asm/fiq_debugger.h
new file mode 100644
index 0000000..00c41ee
--- /dev/null
+++ b/arch/arm/include/asm/fiq_debugger.h
@@ -0,0 +1,42 @@
+/*
+ * arch/arm/include/asm/fiq_debugger.h
+ *
+ * Copyright (C) 2010 Google, Inc.
+ * Author: Colin Cross <ccross@android.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _ARCH_ARM_FIQ_DEBUGGER_H_
+#define _ARCH_ARM_FIQ_DEBUGGER_H_
+
+#include <linux/serial_core.h>
+
+#define FIQ_DEBUGGER_NO_CHAR NO_POLL_CHAR
+#define FIQ_DEBUGGER_BREAK 0x00ff0100
+
+struct fiq_debugger_pdata {
+	int (*uart_init)(struct platform_device *pdev);
+	void (*uart_free)(struct platform_device *pdev);
+	int (*uart_resume)(struct platform_device *pdev);
+	int (*uart_getc)(struct platform_device *pdev);
+	void (*uart_putc)(struct platform_device *pdev, unsigned int c);
+	void (*uart_flush)(struct platform_device *pdev);
+
+	void (*fiq_enable)(struct platform_device *pdev, unsigned int fiq,
+			   bool enable);
+	void (*fiq_ack)(struct platform_device *pdev, unsigned int fiq);
+
+	void (*force_irq)(struct platform_device *pdev, unsigned int irq);
+	void (*force_irq_ack)(struct platform_device *pdev, unsigned int irq);
+};
+
+#endif
diff --git a/arch/arm/mach-mmp/Kconfig b/arch/arm/mach-mmp/Kconfig
index 9e8514f..ac59e91 100644
--- a/arch/arm/mach-mmp/Kconfig
+++ b/arch/arm/mach-mmp/Kconfig
@@ -101,7 +101,7 @@ config CPU_PXA910
 config CPU_MMP2
 	bool
 	select CPU_PJ4
-        select FIQ
+        select MMP2_FIQ_DEBUGGER
 	help
 	  Select code specific to MMP2. MMP2 is ARMv7 compatible.
 
@@ -112,4 +112,11 @@ config MMP2_GPU
         default y
         help
           Say 'Y' here if you want to build the GCx00 support.
+
+config MMP2_FIQ_DEBUGGER
+	bool
+	select FIQ_GLUE
+	help
+	  Support code for FIQ debugger.
+
 endif
diff --git a/arch/arm/mach-mmp/Makefile b/arch/arm/mach-mmp/Makefile
index 5209ffe..69f030b 100644
--- a/arch/arm/mach-mmp/Makefile
+++ b/arch/arm/mach-mmp/Makefile
@@ -8,6 +8,7 @@ obj-y				+= common.o clock.o devices.o time.o
 obj-$(CONFIG_CPU_PXA168)	+= pxa168.o irq-pxa168.o
 obj-$(CONFIG_CPU_PXA910)	+= pxa910.o irq-pxa168.o
 obj-$(CONFIG_CPU_MMP2)		+= mmp2.o irq-mmp2.o sram.o
+obj-$(CONFIG_MMP2_FIQ_DEBUGGER)	+= mmp2_fiq_debugger.o
 
 # USB PHY support
 obj-$(CONFIG_USB_SUPPORT)	+= u2o_phy.o
diff --git a/arch/arm/mach-mmp/include/mach/mmp2.h b/arch/arm/mach-mmp/include/mach/mmp2.h
index eb5b57e..60c787b 100644
--- a/arch/arm/mach-mmp/include/mach/mmp2.h
+++ b/arch/arm/mach-mmp/include/mach/mmp2.h
@@ -19,6 +19,14 @@ extern void icu_fiq_disable(unsigned int irq);
 #include <linux/i2c/pxa-i2c.h>
 #include <mach/devices.h>
 
+#ifdef CONFIG_MMP2_FIQ_DEBUGGER
+extern void __init mmp2_fiq_debug_init(struct pxa_device_desc *d);
+#else
+static inline void __init mmp_fiq_debug_init(struct pxa_device_desc *d)
+{
+}
+#endif
+
 extern struct pxa_device_desc mmp2_device_uart1;
 extern struct pxa_device_desc mmp2_device_uart2;
 extern struct pxa_device_desc mmp2_device_uart3;
diff --git a/arch/arm/mach-mmp/mmp2_fiq_debugger.c b/arch/arm/mach-mmp/mmp2_fiq_debugger.c
new file mode 100644
index 0000000..aef5f4d
--- /dev/null
+++ b/arch/arm/mach-mmp/mmp2_fiq_debugger.c
@@ -0,0 +1,128 @@
+/*
+ * arch/arm/mach-mmp/mmp2_fiq_debugger.c
+ *
+ * MMP FIQ debugger support code.
+ *
+ * Copyright (C) 2011 Andrei Warkentin <andrey.warkentin@gmail.com>
+ * Copyright (C) 2008 Google, Inc.
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/init.h>
+#include <mach/devices.h>
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+#include <asm/fiq_debugger.h>
+#include <mach/mmp2.h>
+
+struct mmp2_fiq_debugger {
+	struct fiq_debugger_pdata pdata;
+	void __iomem *base;
+};
+
+static int debug_port_init(struct platform_device *pdev)
+{
+	return -EIO;
+}
+
+static int debug_getc(struct platform_device *pdev)
+{
+	return FIQ_DEBUGGER_NO_CHAR;
+}
+
+static void debug_putc(struct platform_device *pdev, unsigned int c)
+{
+}
+
+static void debug_flush(struct platform_device *pdev)
+{
+}
+
+static void debug_fiq_enable(struct platform_device *pdev,
+			     unsigned int irq,
+			     bool on)
+{
+	if (on)
+		icu_fiq_enable(irq);
+	else
+		icu_fiq_disable(irq);
+}
+
+static int mmp2_fiq_debugger_id;
+
+void __init mmp2_fiq_debug_init(struct pxa_device_desc *d)
+{
+	struct mmp2_fiq_debugger *t;
+	struct platform_device *pdev;
+	struct resource *res;
+	int res_count;
+
+	t = kzalloc(sizeof(struct mmp2_fiq_debugger), GFP_KERNEL);
+	if (!t) {
+          pr_err("Failed to allocate for fiq debugger\n");
+          return;
+        }
+
+        t->pdata.uart_init = debug_port_init;
+        t->pdata.uart_getc = debug_getc;
+	t->pdata.uart_putc = debug_putc;
+	t->pdata.uart_flush = debug_flush;
+	t->pdata.fiq_enable = debug_fiq_enable;
+
+	t->base = ioremap(d->start, PAGE_SIZE);
+	if (!t->base) {
+		pr_err("Failed to ioremap for fiq debugger\n");
+		goto out1;
+	}
+
+	res = kzalloc(sizeof(struct resource) * 3, GFP_KERNEL);
+	if (!res) {
+		pr_err("Failed to alloc fiq debugger resources\n");
+		goto out2;
+	}
+
+	pdev = kzalloc(sizeof(struct platform_device), GFP_KERNEL);
+	if (!pdev) {
+		pr_err("Failed to alloc fiq debugger platform device\n");
+		goto out3;
+	};
+
+	res[0].flags = IORESOURCE_IRQ;
+	res[0].start = d->irq;
+	res[0].end = d->irq;
+	res[0].name = "fiq";
+
+	res[1].flags = IORESOURCE_IRQ;
+	res[1].start = d->irq;
+	res[1].end = d->irq;
+	res[1].name = "signal";
+	res_count = 2;
+
+	pdev->name = "fiq_debugger";
+	pdev->id = mmp2_fiq_debugger_id++;
+	pdev->dev.platform_data = &t->pdata;
+	pdev->resource = res;
+	pdev->num_resources = res_count;
+
+	if (platform_device_register(pdev)) {
+		pr_err("Failed to register fiq debugger\n");
+		goto out4;
+	}
+
+	return;
+
+out4:
+	kfree(pdev);
+out3:
+	kfree(res);
+out2:
+	iounmap(t->base);
+out1:
+	kfree(t);
+}
+
diff --git a/arch/arm/mach-mmp/olpc-xo-1-75.c b/arch/arm/mach-mmp/olpc-xo-1-75.c
index 7fbdaa5..f78de79 100644
--- a/arch/arm/mach-mmp/olpc-xo-1-75.c
+++ b/arch/arm/mach-mmp/olpc-xo-1-75.c
@@ -533,6 +533,8 @@ static void __init olpc_xo_1_75_init(void)
 	pm_power_off = olpc_xo_1_75_poweroff;
 	arm_pm_restart = olpc_xo_1_75_restart;
 
+        mmp2_fiq_debug_init(&mmp2_device_uart3);
+
 	/* serial ports */
 	/* don't bother creating /dev/ttyS0 -- it only appears on
 	 * an unpopulated (and difficult to install) ribbon cable connector.
-- 
1.7.6.1

