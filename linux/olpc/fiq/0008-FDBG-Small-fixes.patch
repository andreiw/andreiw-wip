From 54c5a0db079777013e28f1a7d16a1c2a76eedf3c Mon Sep 17 00:00:00 2001
From: Andrei Warkentin <andrey.warkentin@gmail.com>
Date: Fri, 30 Sep 2011 01:33:53 -0400
Subject: [PATCH 8/8] FDBG: Small fixes.

Never call pm_relax if in KGDB mode.
Use double Ctrl-Break to break into FIQ debugger if in KGDB mode.
String fixes.

Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com>
---
 arch/arm/common/fiq_debugger.c |   29 +++++++++++++++--------------
 1 files changed, 15 insertions(+), 14 deletions(-)

diff --git a/arch/arm/common/fiq_debugger.c b/arch/arm/common/fiq_debugger.c
index c161e8c..c3c27ff 100644
--- a/arch/arm/common/fiq_debugger.c
+++ b/arch/arm/common/fiq_debugger.c
@@ -428,10 +428,12 @@ static void kgdb_fiq_post_exp_handler(void)
 	if (!kgdb_connected) {
 		state->kgdb_broken_in = false;
 
-		/* Necessary. We might have returned
-		 from KGDB because we're stepping/continuing,
-		and any stray output from console or such
-		will confuse the debugger. */
+		/*
+		 * Necessary. We might have returned
+		 * from KGDB because we're stepping/continuing,
+		 * and any stray output from console or such
+		 * will confuse the debugger.
+		 */
 		state->io_dir = FIQ_IO_FIQ;
 
 		/* poke sleep timer if necessary */
@@ -485,6 +487,7 @@ static void kgdb_bp(struct fiq_debugger_state *state)
 	if (!kgdb_enable(state))
 		return;
 
+	debug_printf_nfiq(state, "kgdb debugger mode - ctrl-break twice to exit\n");
 	state->kgdb_broken_in = true;
 	kgdb_breakpoint();
 }
@@ -682,10 +685,10 @@ static void debug_help(struct fiq_debugger_state *state)
 				" cpu           Current CPU\n"
 				" cpu <number>  Switch to CPU<number>\n");
 #ifdef CONFIG_FIQ_DEBUGGER_KGDB
-	debug_printf(state, 	" kgdb          Break into or return to KGDB\n"
+	debug_printf(state, 	" kgdb          Break into or return to kgdb\n"
 #ifdef CONFIG_FIQ_DEBUGGER_KGDB_INSECURE
-				" kgdbon        Enable KGDB\n"
-				" kgdboff       Disable KGDB\n"
+				" kgdbon        Enable kgdb\n"
+				" kgdboff       Disable kgdb\n"
 #endif
 		);
 #endif
@@ -742,14 +745,14 @@ static bool debug_exec(struct fiq_debugger_state *state,
 	} else if (!strcmp(cmd, "kgdb") && state->kgdb_broken_in) {
 
 		/* The non-nested case is handled inside debug_irq. */
-		debug_printf(state, "<you're now in kgdb/kdb>\n");
+		debug_printf(state, "you're back in kgdb mode\n");
 		state->io_dir = FIQ_IO_KGDB;
 		show_prompt = false;
 #endif
 	} else {
 		if (state->debug_busy) {
 			debug_printf(state,
-				     "command processor busy. trying to abort\n");
+				     "command processor busy - trying to abort\n");
 			state->debug_abort = 1;
 		} else {
 			show_prompt = false;
@@ -768,10 +771,8 @@ static void sleep_timer_expired(unsigned long data)
 	struct fiq_debugger_state *state = (struct fiq_debugger_state *)data;
 
 #ifdef CONFIG_FIQ_DEBUGGER_KGDB
-	if (state->kgdb_broken_in) {
-		pm_relax(&state->pdev->dev);
+	if (state->kgdb_broken_in)
 		return;
-	}
 #endif
 
 	if (state->uart_clk_enabled &&
@@ -868,7 +869,6 @@ static irqreturn_t debug_irq(int irq, void *dev)
 					state->pdev,
 					&ctxt,
 					state->debug_cmd);
-				
 				if (ret > 0)
 					debug_printf(state, "(\"more\" for more) ");
 			}
@@ -924,7 +924,8 @@ static void debug_fiq(struct fiq_glue_handler *h, void *regs, void *svc_sp)
 				state->debug_count = 0;
 				debug_prompt(state);
 			}
-		} else if (c == FIQ_DEBUGGER_BREAK) {
+		} else if ((c == FIQ_DEBUGGER_BREAK && state->io_dir != FIQ_IO_KGDB) ||
+			   (c == FIQ_DEBUGGER_BREAK && last_c == FIQ_DEBUGGER_BREAK)) {
 			state->io_dir = FIQ_IO_FIQ;
 			debug_puts(state, "fiq debugger mode\n");
 			state->debug_count = 0;
-- 
1.7.6.1

