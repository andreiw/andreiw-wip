From 3c9c6df8babe1cb57848dd380afd8dbf2f68c861 Mon Sep 17 00:00:00 2001
From: Andrei Warkentin <andrey.warkentin@gmail.com>
Date: Sun, 25 Sep 2011 04:06:19 -0400
Subject: [PATCH 3/6] MMP2: FIQ debugger platform device.

This also adds the interface header between the platform
device and the FIQ debugger, with some modifications to
the original Google version - namely, the ability to
pass struct clk and the ability to invoke platform
specific FIQ debugger commands.

Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com>
---
 arch/arm/include/asm/fiq_debugger.h   |   72 +++++++++
 arch/arm/mach-mmp/Kconfig             |    8 +
 arch/arm/mach-mmp/Makefile            |    1 +
 arch/arm/mach-mmp/include/mach/irqs.h |    1 +
 arch/arm/mach-mmp/include/mach/mmp2.h |   12 ++
 arch/arm/mach-mmp/mmp2_fiq_debugger.c |  267 +++++++++++++++++++++++++++++++++
 6 files changed, 361 insertions(+), 0 deletions(-)
 create mode 100644 arch/arm/include/asm/fiq_debugger.h
 create mode 100644 arch/arm/mach-mmp/mmp2_fiq_debugger.c

diff --git a/arch/arm/include/asm/fiq_debugger.h b/arch/arm/include/asm/fiq_debugger.h
new file mode 100644
index 0000000..c14249e
--- /dev/null
+++ b/arch/arm/include/asm/fiq_debugger.h
@@ -0,0 +1,72 @@
+/*
+ * arch/arm/include/asm/fiq_debugger.h
+ *
+ * Copyright (C) 2011 Andrei Warkentin <andrey.warkentin@gmail.com>
+ *
+ * Copyright (C) 2010 Google, Inc.
+ * Author: Colin Cross <ccross@android.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _ARCH_ARM_FIQ_DEBUGGER_H_
+#define _ARCH_ARM_FIQ_DEBUGGER_H_
+
+#include <linux/serial_core.h>
+
+#define FIQ_DEBUGGER_NO_CHAR NO_POLL_CHAR
+#define FIQ_DEBUGGER_BREAK 0x00ff0100
+
+struct fiq_debugger_ctxt {
+  int (*printf)(void *cookie, const char *fmt, ...);
+  void *cookie;
+};
+
+struct fiq_debugger_pdata {
+	int (*uart_init)(struct platform_device *pdev);
+	void (*uart_free)(struct platform_device *pdev);
+	int (*uart_resume)(struct platform_device *pdev);
+	int (*uart_getc)(struct platform_device *pdev);
+	void (*uart_putc)(struct platform_device *pdev, unsigned int c);
+	void (*uart_flush)(struct platform_device *pdev);
+
+	void (*fiq_enable)(struct platform_device *pdev, unsigned int fiq,
+			   bool enable);
+	void (*fiq_ack)(struct platform_device *pdev, unsigned int fiq);
+
+	void (*force_irq)(struct platform_device *pdev, unsigned int irq);
+	void (*force_irq_ack)(struct platform_device *pdev, unsigned int irq);
+	struct clk *(*uart_clk)(struct platform_device *pdev);
+
+	/*
+	 * platform_cmds() is called from IRQ context and should
+	 * use the ctxt.printf to write output (do NOT call
+	 * printk, do operations not safe from IRQ context, etc).
+	 *
+	 * ctxt.printf will return -1 if there is not enough
+	 * buffer space or if you are being aborted.  In this case
+	 * you must return as soon as possible.
+	 *
+	 * Return non-zero if more data is available -- if buffer
+	 * space ran and you had to stop, but could print more,
+	 * for example.
+	 *
+	 * Additional calls where cmd is "more" will be made if
+	 * the additional data is desired.
+	 *
+	 */
+
+	int (*platform_cmds)(struct platform_device *pdev,
+			     struct fiq_debugger_ctxt *ctxt,
+			     char *cmd);
+};
+
+#endif
diff --git a/arch/arm/mach-mmp/Kconfig b/arch/arm/mach-mmp/Kconfig
index 9d285ea..e299021 100644
--- a/arch/arm/mach-mmp/Kconfig
+++ b/arch/arm/mach-mmp/Kconfig
@@ -111,4 +111,12 @@ config MMP2_GPU
         default y
         help
           Say 'Y' here if you want to build the GCx00 support.
+
+config MMP2_FIQ_DEBUGGER
+	tristate "MMP2 FIQ debugger support"
+	depends on CPU_MMP2
+	select FIQ_GLUE
+	help
+	  Say 'Y' if you want to use the FIQ debugger.
+
 endif
diff --git a/arch/arm/mach-mmp/Makefile b/arch/arm/mach-mmp/Makefile
index 5209ffe..69f030b 100644
--- a/arch/arm/mach-mmp/Makefile
+++ b/arch/arm/mach-mmp/Makefile
@@ -8,6 +8,7 @@ obj-y				+= common.o clock.o devices.o time.o
 obj-$(CONFIG_CPU_PXA168)	+= pxa168.o irq-pxa168.o
 obj-$(CONFIG_CPU_PXA910)	+= pxa910.o irq-pxa168.o
 obj-$(CONFIG_CPU_MMP2)		+= mmp2.o irq-mmp2.o sram.o
+obj-$(CONFIG_MMP2_FIQ_DEBUGGER)	+= mmp2_fiq_debugger.o
 
 # USB PHY support
 obj-$(CONFIG_USB_SUPPORT)	+= u2o_phy.o
diff --git a/arch/arm/mach-mmp/include/mach/irqs.h b/arch/arm/mach-mmp/include/mach/irqs.h
index dd4545d..678b26e 100644
--- a/arch/arm/mach-mmp/include/mach/irqs.h
+++ b/arch/arm/mach-mmp/include/mach/irqs.h
@@ -168,6 +168,7 @@
 #define IRQ_MMP2_MMC3			53
 #define IRQ_MMP2_MMC4			54
 #define IRQ_MMP2_MIPI_HSI		55
+#define IRQ_MMP2_IPC			56
 #define IRQ_MMP2_MSP			58
 #define IRQ_MMP2_MIPI_SLIM_DMA		59
 #define IRQ_MMP2_PJ4_FREQ_CHG		60
diff --git a/arch/arm/mach-mmp/include/mach/mmp2.h b/arch/arm/mach-mmp/include/mach/mmp2.h
index eb5b57e..03d09a0 100644
--- a/arch/arm/mach-mmp/include/mach/mmp2.h
+++ b/arch/arm/mach-mmp/include/mach/mmp2.h
@@ -18,6 +18,18 @@ extern void icu_fiq_disable(unsigned int irq);
 #include <linux/i2c.h>
 #include <linux/i2c/pxa-i2c.h>
 #include <mach/devices.h>
+#include <linux/clk.h>
+
+#ifdef CONFIG_MMP2_FIQ_DEBUGGER
+extern int __init mmp2_fiq_debug_init(unsigned int base, struct clk *clk,
+				       int irq, int signal_irq, int wakeup_irq);
+#else
+static inline int __init mmp_fiq_debug_init(unsigned int base, struct clk *clk,
+					    int irq, int signal_irq, int wakeup_irq)
+{
+	return -ENODEV;
+}
+#endif
 
 extern struct pxa_device_desc mmp2_device_uart1;
 extern struct pxa_device_desc mmp2_device_uart2;
diff --git a/arch/arm/mach-mmp/mmp2_fiq_debugger.c b/arch/arm/mach-mmp/mmp2_fiq_debugger.c
new file mode 100644
index 0000000..a4388c1
--- /dev/null
+++ b/arch/arm/mach-mmp/mmp2_fiq_debugger.c
@@ -0,0 +1,267 @@
+/*
+ * arch/arm/mach-mmp/mmp2_fiq_debugger.c
+ *
+ * MMP FIQ debugger support code.
+ *
+ * Copyright (C) 2011 Andrei Warkentin <andrey.warkentin@gmail.com>
+ * Copyright (C) 2008 Google, Inc.
+ *
+ * Serial code is derived from tty/serial/pxa.c.
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/init.h>
+#include <mach/devices.h>
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+#include <linux/serial_reg.h>
+#include <asm/fiq_debugger.h>
+#include <mach/mmp2.h>
+#include <mach/addr-map.h>
+
+static unsigned int baud = 115200;
+
+struct mmp2_fiq_debugger {
+	struct fiq_debugger_pdata pdata;
+	bool break_seen;
+	struct clk *clk;
+	void __iomem *base;
+};
+
+static inline unsigned int mmp2_in(struct mmp2_fiq_debugger *d, int offset)
+{
+	offset <<= 2;
+	return readl(d->base + offset);
+}
+
+static inline void mmp2_out(struct mmp2_fiq_debugger *d, int offset, int value)
+{
+	offset <<= 2;
+	writel(value, d->base + offset);
+}
+
+static struct clk *debug_clk(struct platform_device *pdev)
+{
+	struct mmp2_fiq_debugger *d;
+	d = container_of(dev_get_platdata(&pdev->dev), typeof(*d), pdata);
+
+	return d->clk;
+}
+
+static int debug_port_init(struct platform_device *pdev)
+{
+	unsigned int quot;
+	struct mmp2_fiq_debugger *d;
+	d = container_of(dev_get_platdata(&pdev->dev), typeof(*d), pdata);
+
+	/* No FIFO. */
+	mmp2_out(d, UART_FCR, UART_FCR_ENABLE_FIFO);
+	mmp2_out(d, UART_FCR, UART_FCR_ENABLE_FIFO |
+		 UART_FCR_CLEAR_RCVR | UART_FCR_CLEAR_XMIT);
+	mmp2_out(d, UART_FCR, 0);
+
+        /* Clear state. */
+	mmp2_in(d, UART_LSR);
+	mmp2_in(d, UART_RX);
+	mmp2_in(d, UART_IIR);
+	mmp2_in(d, UART_MSR);
+
+        /* Baud. */
+	quot = (clk_get_rate(d->clk) + (8 * baud)) / (16 * baud);
+	mmp2_out(d, UART_LCR, UART_LCR_DLAB);
+	mmp2_out(d, UART_DLL, quot & 0xff);
+	mmp2_out(d, UART_DLM, quot >> 8);
+
+	/* 8n1. */
+	mmp2_out(d, UART_LCR, UART_LCR_WLEN8);
+
+	/* Enable port, RX and LSR interrupt. */
+	mmp2_out(d, UART_MCR, UART_MCR_OUT2);
+	mmp2_out(d, UART_IER,
+                 UART_IER_UUE | UART_IER_RLSI | UART_IER_RDI);
+
+	/* Clear state for luck. */
+	mmp2_in(d, UART_LSR);
+	mmp2_in(d, UART_RX);
+	mmp2_in(d, UART_IIR);
+	mmp2_in(d, UART_MSR);
+
+	return 0;
+}
+
+static inline unsigned int mmp2_read_lsr(struct mmp2_fiq_debugger *d)
+{
+	unsigned int lsr;
+
+	lsr = mmp2_in(d, UART_LSR);
+	if (lsr & UART_LSR_BI)
+		d->break_seen = true;
+
+	return lsr;
+}
+
+static int debug_getc(struct platform_device *pdev)
+{
+	unsigned lsr;
+	struct mmp2_fiq_debugger *d;
+	d = container_of(dev_get_platdata(&pdev->dev), typeof(*d), pdata);
+
+	lsr = mmp2_read_lsr(d);
+	if (lsr & UART_LSR_BI || d->break_seen) {
+		d->break_seen = false;
+		return FIQ_DEBUGGER_BREAK;
+	}
+
+	if (lsr & UART_LSR_DR)
+		return mmp2_in(d, UART_RX);
+
+	return FIQ_DEBUGGER_NO_CHAR;
+}
+
+static void debug_putc(struct platform_device *pdev, unsigned int c)
+{
+	struct mmp2_fiq_debugger *d;
+	d = container_of(dev_get_platdata(&pdev->dev), typeof(*d), pdata);
+
+	while (!(mmp2_read_lsr(d) & UART_LSR_THRE))
+		cpu_relax();
+
+	mmp2_out(d, UART_TX, c);
+}
+
+static void debug_flush(struct platform_device *pdev)
+{
+	struct mmp2_fiq_debugger *d;
+	d = container_of(dev_get_platdata(&pdev->dev), typeof(*d), pdata);
+
+	while (!(mmp2_read_lsr(d) & UART_LSR_TEMT))
+		cpu_relax();
+}
+
+static void debug_fiq_enable(struct platform_device *pdev,
+			     unsigned int irq,
+			     bool on)
+{
+	if (on)
+		icu_fiq_enable(irq);
+	else
+		icu_fiq_disable(irq);
+}
+
+static void debug_force_irq(struct platform_device *pdev,
+                            unsigned int irq)
+{
+	BUG_ON(irq != IRQ_MMP2_IPC);
+	writel(0x400, APB_VIRT_BASE + 0x1d008);
+}
+
+static void debug_force_irq_ack(struct platform_device *pdev,
+                                unsigned int irq)
+{
+	BUG_ON(irq != IRQ_MMP2_IPC);
+	writel(0x400, APB_VIRT_BASE + 0x1d40c);
+}
+
+static int mmp2_fiq_debugger_id;
+
+int __init mmp2_fiq_debug_init(unsigned int base, struct clk *clk,
+				int irq, int signal_irq, int wakeup_irq)
+{
+	struct mmp2_fiq_debugger *d;
+	struct platform_device *pdev;
+	struct resource *res;
+	int res_count;
+
+	d = kzalloc(sizeof(struct mmp2_fiq_debugger), GFP_KERNEL);
+	if (!d) {
+		pr_err("Failed to allocate for fiq debugger\n");
+		return -ENOMEM;
+	}
+
+	/*
+	 * Hack - the IPC block should be exposed as a
+	 * secondary PIC, but we don't know enough about
+	 * it's registers to do that :(. The IPC block
+	 * has many secondary "interrupts" and these
+	 * need to be acked, or we are going to run into
+	 * a bajillion of INT #56 as soon as we enable it.
+	 */
+	writel(0xffffffff, APB_VIRT_BASE + 0x1d40c);
+
+	d->pdata.uart_init = debug_port_init;
+	d->pdata.uart_getc = debug_getc;
+	d->pdata.uart_putc = debug_putc;
+	d->pdata.uart_flush = debug_flush;
+	d->pdata.uart_clk = debug_clk;
+	d->pdata.fiq_enable = debug_fiq_enable;
+	d->pdata.force_irq = debug_force_irq;
+	d->pdata.force_irq_ack = debug_force_irq_ack;
+
+	d->clk = clk;
+	d->base = ioremap(base, PAGE_SIZE);
+	if (!d->base) {
+		pr_err("Failed to ioremap for fiq debugger\n");
+		goto out1;
+	}
+
+	res = kzalloc(sizeof(struct resource) * 3, GFP_KERNEL);
+	if (!res) {
+		pr_err("Failed to alloc fiq debugger resources\n");
+		goto out2;
+	}
+
+	pdev = kzalloc(sizeof(struct platform_device), GFP_KERNEL);
+	if (!pdev) {
+		pr_err("Failed to alloc fiq debugger platform device\n");
+		goto out3;
+	};
+
+	res[0].flags = IORESOURCE_IRQ;
+	res[0].start = irq;
+	res[0].end = irq;
+	res[0].name = "fiq";
+
+	res[1].flags = IORESOURCE_IRQ;
+	res[1].start = signal_irq;
+	res[1].end = signal_irq;
+	res[1].name = "signal";
+	res_count = 2;
+
+	if (wakeup_irq >= 0) {
+		res[2].flags = IORESOURCE_IRQ;
+		res[2].start = wakeup_irq;
+		res[2].end = wakeup_irq;
+		res[2].name = "wakeup";
+		res_count++;
+	}
+
+	pdev->name = "fiq_debugger";
+	pdev->id = mmp2_fiq_debugger_id++;
+	pdev->dev.platform_data = &d->pdata;
+	pdev->resource = res;
+	pdev->num_resources = res_count;
+
+	if (platform_device_register(pdev)) {
+		pr_err("Failed to register fiq debugger\n");
+		goto out4;
+	}
+
+	return 0;
+
+out4:
+	kfree(pdev);
+out3:
+	kfree(res);
+out2:
+	iounmap(d->base);
+out1:
+	kfree(d);
+	return -ENXIO;
+}
+
+module_param(baud, uint, 0);
-- 
1.7.6.1

