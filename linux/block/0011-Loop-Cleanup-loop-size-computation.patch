From 7b70b7d198b87accd2ec89076717b4c0c92fa48c Mon Sep 17 00:00:00 2001
From: Andrei Warkentin <andreiw@motorola.com>
Date: Thu, 11 Aug 2011 17:08:57 -0500
Subject: [PATCH 11/11] Loop: Cleanup loop size computation.

Push lo_offset/lo_sizelimit into raw parser size() method,
where it belongs. Get rid of get_loop_size and replace
with read_i_size in loop switch code. Loop switch
code at this point is parser agnostic and does a basic
sanity check in that the two files at least have same
physical size (which is a reasonable check).

As noted by an earlier comment in loop.h, lo_offset/lo_sizelimit
will only apply to the raw parser and not impact VHD/VMDK/whatnot.

Change-Id: I8dda29a917e687381f37804054a63d870e48a2d3
Signed-off-by: Andrei Warkentin <andreiw@motorola.com>
---
 drivers/block/loop.c |   36 ++++++++++++++++--------------------
 1 files changed, 16 insertions(+), 20 deletions(-)

diff --git a/drivers/block/loop.c b/drivers/block/loop.c
index 9d0323a..4593df1 100644
--- a/drivers/block/loop.c
+++ b/drivers/block/loop.c
@@ -184,24 +184,6 @@ static struct loop_func_table *xfer_funcs[MAX_LO_CRYPT] = {
 	&xor_funcs
 };
 
-static loff_t get_loop_size(struct loop_device *lo, struct file *file)
-{
-	loff_t size, offset, loopsize;
-
-	/* Compute loopsize in bytes */
-	size = i_size_read(file->f_mapping->host);
-	offset = lo->lo_offset;
-	loopsize = size - offset;
-	if (lo->lo_sizelimit > 0 && lo->lo_sizelimit < loopsize)
-		loopsize = lo->lo_sizelimit;
-
-	/*
-	 * Unfortunately, if we want to do I/O on the device,
-	 * the number of 512-byte sectors has to fit into a sector_t.
-	 */
-	return loopsize >> 9;
-}
-
 static int
 figure_loop_size(struct loop_device *lo)
 {
@@ -887,7 +869,8 @@ static int loop_change_fd(struct loop_device *lo, struct block_device *bdev,
 	   This is an extremely basic check. No verification is
 	   done as to whether the new file is supported by the parser
 	   and equivalent in state to the old one. Caveat Emptor! */
-	if (get_loop_size(lo, file) != get_loop_size(lo, old_file))
+	if (i_size_read(file->f_mapping->host) !=
+	    i_size_read(old_file->f_mapping->host))
 		goto out_putf;
 
 	/* and ... switch */
@@ -1818,7 +1801,20 @@ static void raw_release(struct loop_device *lo, struct lo_file *lo_file)
 
 static loff_t raw_size(struct loop_device *lo, struct lo_file *lo_file)
 {
-	return get_loop_size(lo, lo_file->file);
+	loff_t size, offset, loopsize;
+
+	/* Compute loopsize in bytes */
+	size = i_size_read(lo_file->file->f_mapping->host);
+	offset = lo->lo_offset;
+	loopsize = size - offset;
+	if (lo->lo_sizelimit > 0 && lo->lo_sizelimit < loopsize)
+		loopsize = lo->lo_sizelimit;
+
+	/*
+	 * Unfortunately, if we want to do I/O on the device,
+	 * the number of 512-byte sectors has to fit into a sector_t.
+	 */
+	return size >> 9;
 }
 
 static int raw_flush(struct loop_device *lo, struct lo_file *lo_file)
-- 
1.7.0.4

