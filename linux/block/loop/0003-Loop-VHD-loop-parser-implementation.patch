From 60dbd7ff4c72a5c5df2f9d502837cf7c4f5ce0bb Mon Sep 17 00:00:00 2001
From: Andrei Warkentin <andrey.warkentin@gmail.com>
Date: Sun, 25 Sep 2011 23:37:26 -0400
Subject: [PATCH 3/4] Loop: VHD loop parser implementation.

This VHD parser supports fixed-size and dynamic disks.

Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com>
---
 drivers/block/Kconfig   |    8 +
 drivers/block/Makefile  |    1 +
 drivers/block/vhdloop.c |  724 +++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 733 insertions(+), 0 deletions(-)
 create mode 100644 drivers/block/vhdloop.c

diff --git a/drivers/block/Kconfig b/drivers/block/Kconfig
index 326fd90..c7f391e 100644
--- a/drivers/block/Kconfig
+++ b/drivers/block/Kconfig
@@ -290,6 +290,14 @@ config BLK_DEV_LOOP_UTIL
 	bool
 	depends on BLK_DEV_LOOP
 
+config BLK_DEV_VHDLOOP
+	tristate "VHD loop support"
+	depends on BLK_DEV_LOOP
+	select BLK_DEV_LOOP_UTIL
+	---help---
+	  Say Y here if you want to be able to use VHD images
+	  as disks using the loop device.
+
 source "drivers/block/drbd/Kconfig"
 
 config BLK_DEV_NBD
diff --git a/drivers/block/Makefile b/drivers/block/Makefile
index eb3df97..caf5b8e 100644
--- a/drivers/block/Makefile
+++ b/drivers/block/Makefile
@@ -29,6 +29,7 @@ obj-$(CONFIG_BLK_DEV_UMEM)	+= umem.o
 obj-$(CONFIG_BLK_DEV_NBD)	+= nbd.o
 obj-$(CONFIG_BLK_DEV_CRYPTOLOOP) += cryptoloop.o
 obj-$(CONFIG_BLK_DEV_LOOP_UTIL)	+= looputil.o
+obj-$(CONFIG_BLK_DEV_VHDLOOP)	+= vhdloop.o
 obj-$(CONFIG_VIRTIO_BLK)	+= virtio_blk.o
 
 obj-$(CONFIG_VIODASD)		+= viodasd.o
diff --git a/drivers/block/vhdloop.c b/drivers/block/vhdloop.c
new file mode 100644
index 0000000..36c841d
--- /dev/null
+++ b/drivers/block/vhdloop.c
@@ -0,0 +1,724 @@
+/*
+   Linux loop VHD support.
+
+   Copyright (C) 2011 Andrei Warkentin <andreiw@vmware.com>
+
+   This module is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This module is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this module; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/loop.h>
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("loop VHD parser");
+MODULE_AUTHOR("Andrei Warkentin <andreiw@vmware.com>");
+
+#define COOKIE(x)		(*(u64 *) x)
+#define FOOTER_COOKIE		COOKIE("conectix")
+#define CXSPARSE_COOKIE		COOKIE("cxsparse")
+#define FOOTER_FEAT_RSVD	(2)
+#define VHD_VERSION_1		(0x00010000UL)
+#define VHD_VMAJ_MASK		(0xFFFF0000UL)
+#define VHD_VMIN_MASL		(0x0000FFFFUL)
+#define DYN_VERSION_1		(0x00010000UL)
+#define DYN_VMAJ_MASK		(0xFFFF0000UL)
+#define DYN_VMIN_MASK		(0x0000FFFFUL)
+#define FOOTER_DOFF_FIXED	(0xFFFFFFFFFFFFFFFFULL)
+#define DYN_DOFF_DYN		(0xFFFFFFFFFFFFFFFFULL)
+#define FOOTER_TYPE_FIXED	(2)
+#define FOOTER_TYPE_DYN		(3)
+#define FOOTER_TYPE_DIFF	(4)
+#define SEC_SHIFT		(9)
+#define SEC_SZ			(1 << SEC_SHIFT)
+#define VHD_DNAME(vhd)		((vhd)->lo->lo_disk->disk_name)
+#define BAT_SZ(entries)		round_up(sizeof(vhd_batent) * (entries), SEC_SZ)
+#define SECTOR_BMP_SZ(usz)	round_up((usz) >> (SEC_SHIFT + 3), SEC_SZ)
+#define FOOTER_SZ(vhd)		(sizeof(struct vhd_footer) - ((vhd)->footer -\
+				&(vhd)->footer_data))
+#define BMP_CACHE_PREFIX	("vhdbmp")
+
+/* All fields Big-Endian */
+struct vhd_id
+{
+	u32 f1;
+	u16 f2;
+	u16 f3;
+	u8  f4[8];
+};
+
+/* All fields Big-Endian */
+struct vhd_chs
+{
+	u16 c;
+	u8  h;
+	u8  s;
+};
+
+/* All fields Big-Endian */
+struct vhd_footer
+{
+	u64 cookie;
+	u32 features;
+	u32 file_format_ver;
+	u64 data_offset;
+	u32 time_stamp;
+	u32 creator_app;
+	u32 creator_ver;
+	u32 creator_os;
+	u64 original_size;
+	u64 current_size;
+	struct vhd_chs disk_geometry;
+	u32 disk_type;
+	u32 checksum;
+	struct vhd_id vhd_id;
+	u8 saved_state;
+	u8 reserved[427];
+};
+
+/* All fields Big-Endian */
+struct vhd_ploc
+{
+	u32 code;
+	u32 sectors;
+	u32 length;
+	u32 reserved;
+	u64 offset;
+};
+
+/* All fields Big-Endian */
+struct vhd_dyn
+{
+	u64 cookie;
+	u64 data_offset;
+	u64 table_offset;
+	u32 header_version;
+	u32 max_tab_entries;
+	u32 block_size;
+	u32 checksum;
+	struct vhd_id parent;
+	u32 parent_time_stamp;
+	u32 reserved0;
+	u8 parent_utf16[512];
+	struct vhd_ploc pe[8];
+	u8 reserved1[256];
+};
+
+typedef u32 vhd_batent;
+
+#define VHD_BMP_DIRTY (0x1)
+
+struct vhd_bmp
+{
+	unsigned flags;
+	u8  bmp[0];
+};
+
+/* Dirty BAT needs to be flushed (and footer re-written) */
+#define VHD_BAT_DIRTY (0x1)
+
+struct vhd
+{
+	struct loop_device *lo;
+	struct lo_file     *lo_file;
+	struct vhd_footer footer_data;
+	struct vhd_dyn    dyn;
+	struct vhd_footer mirror;
+
+	/*
+	 * Parsed from image. Crazy footer can be
+	 * in last 511 bytes of file, so this points
+	 * somewhere into footer_data.
+	 */
+	struct vhd_footer *footer;
+	loff_t file_size;
+	loff_t size;
+	u32 type;
+
+	/*
+	 * Parsed from dynamic header.
+	 */
+	struct kmem_cache *bmp_cache;
+	char *bmp_cache_name;
+	loff_t table_offset;
+	u32 bat_entries;
+	size_t block_unit;
+	vhd_batent *bat;
+
+	/*
+	 * Note: the bitmaps should be in a LRU list,
+	 * and should respond to memory pressure.
+	 */
+	struct vhd_bmp **bmps;
+	unsigned flags;
+};
+
+static int vhd_chs(struct vhd *vhd)
+{
+	u64 temp;
+	u64 cyl_x_heads;
+	u64 sectors = vhd->size >> SEC_SHIFT;
+	struct vhd_chs chs;
+
+	/*
+	 * Blame AndrewN for this one... All this logic is from
+	 * the VHD specification.
+	 */
+	if (sectors > 65535 * 16 * 255) {
+
+		/* ~127GiB */
+		sectors =  65535 * 16 * 255;
+	}
+	if (sectors >= 65535 * 16 * 63) {
+		chs.s = 255;
+		chs.h = 16;
+		cyl_x_heads = sectors;
+		do_div(cyl_x_heads, chs.s);
+	} else {
+		chs.s = 17;
+		cyl_x_heads = sectors;
+		do_div(cyl_x_heads, chs.s);
+		chs.h = (cyl_x_heads + 1023) / 1024;
+		if (chs.h < 4)
+			chs.h = 4;
+
+		if (cyl_x_heads >= (chs.h * 1024) || chs.h > 16) {
+			chs.s = 31;
+			chs.h = 16;
+			cyl_x_heads = sectors;
+			do_div(cyl_x_heads, chs.s);
+		}
+		if (cyl_x_heads >= (chs.h * 1024)) {
+			chs.s = 63;
+			chs.h = 16;
+			cyl_x_heads = sectors;
+			do_div(cyl_x_heads, chs.s);
+		}
+	}
+	temp = cyl_x_heads;
+	do_div(temp, chs.h);
+	chs.c = temp;
+
+	if (be16_to_cpu(vhd->footer->disk_geometry.c) != chs.c ||
+	    vhd->footer->disk_geometry.h != chs.h ||
+	    vhd->footer->disk_geometry.s != chs.s) {
+		return -EINVAL;
+	}
+
+	/*
+	 * At some point we'll have the ability to pass options
+	 * to the parser from losetup, and we can add the option
+	 * to clamp size to CHS-implied size, as you can have VHDs
+	 * whose size doesn't match CHS-implied size. This may be
+	 * seen in Hyper-V moving a VHD from SCSI to ATA.
+	 */
+	return 0;
+}
+
+static u32 vhd_checksum(u8 *data, off_t size)
+{
+	u32 csum = 0;
+	while (size--) {
+		csum += *data++;
+	}
+	return ~csum;
+}
+
+static int vhd_footer_csum(struct vhd_footer *footer)
+{
+	u32 nsum;
+	u32 csum = footer->checksum;
+	footer->checksum = 0;
+	nsum = vhd_checksum((u8 *) footer, sizeof(*footer));
+	footer->checksum = csum;
+	if (nsum != be32_to_cpu(csum))
+		return -EINVAL;
+	return 0;
+}
+
+static int vhd_dyn_csum(struct vhd_dyn *dyn)
+{
+	u32 nsum;
+	u32 csum = dyn->checksum;
+	dyn->checksum = 0;
+	nsum = vhd_checksum((u8 *) dyn, sizeof(*dyn));
+	dyn->checksum = csum;
+	if (nsum != be32_to_cpu(csum))
+		return -EINVAL;
+
+	return 0;
+}
+
+static struct vhd_footer *vhd_check_footer(struct vhd_footer *footer)
+{
+	struct vhd_footer *f = footer;
+	if (vhd_footer_csum(f)) {
+
+		/* Could be < VPC2004 version, with 511-byte header. */
+		f = (struct vhd_footer *)((u8 *) footer + 1);
+		if (vhd_footer_csum(f))
+			return NULL;
+	}
+
+	return f;
+}
+
+static int vhd_verify_dyn(struct vhd *vhd)
+{
+	int ret;
+	loff_t blocks;
+	unsigned len;
+	u64 data_offset = be64_to_cpu(vhd->footer->data_offset);
+	if (data_offset > vhd->file_size ||
+	    data_offset + sizeof(vhd->dyn) > vhd->file_size)
+		return -EINVAL;
+
+	ret = loop_read_kbuf(vhd->lo, vhd->lo_file, &vhd->mirror,
+			     sizeof(vhd->mirror),
+			     0);
+	if (ret)
+		return ret;
+
+	if (memcmp(vhd->footer, &vhd->mirror, FOOTER_SZ(vhd))) {
+		printk(KERN_ERR "%s: corrupt (footer != mirror)\n",
+		       VHD_DNAME(vhd));
+		return -EINVAL;
+	}
+
+	ret = loop_read_kbuf(vhd->lo, vhd->lo_file, &vhd->dyn,
+			     sizeof(vhd->dyn),
+			     data_offset);
+	if (ret)
+		return ret;
+
+	if (vhd->dyn.cookie != CXSPARSE_COOKIE ||
+	    be64_to_cpu(vhd->dyn.data_offset) != DYN_DOFF_DYN ||
+	    vhd_dyn_csum(&vhd->dyn)) {
+		printk(KERN_ERR "%s: corrupt sparse header\n",
+		       VHD_DNAME(vhd));
+		return -EINVAL;
+	}
+
+	if ((be32_to_cpu(vhd->dyn.header_version) & DYN_VMAJ_MASK) != DYN_VERSION_1) {
+		printk(KERN_ERR "%s: corrupt (bad version 0x%x)\n",
+		       VHD_DNAME(vhd),
+		       be32_to_cpu(vhd->dyn.header_version));
+		return -EINVAL;
+	}
+
+	vhd->table_offset = be64_to_cpu(vhd->dyn.table_offset);
+	vhd->bat_entries = be32_to_cpu(vhd->dyn.max_tab_entries);
+	vhd->block_unit = be32_to_cpu(vhd->dyn.block_size);
+	if (!vhd->block_unit ||
+	    (vhd->block_unit & (vhd->block_unit - 1))) {
+		printk(KERN_ERR "%s: invalid sparse block size %d\n",
+		       VHD_DNAME(vhd), vhd->block_unit);
+		return -EINVAL;
+
+	}
+	blocks = round_up(vhd->size, vhd->block_unit);
+	do_div(blocks, vhd->block_unit);
+	if (blocks != vhd->bat_entries) {
+		printk(KERN_ERR "%s: sparse blocks (%lld) don't match disk size (%d)\n",
+		       VHD_DNAME(vhd), blocks, vhd->bat_entries);
+		return -EINVAL;
+	}
+
+	if (vhd->table_offset > vhd->file_size ||
+	    vhd->table_offset + BAT_SZ(vhd->bat_entries) > vhd->file_size) {
+		printk(KERN_ERR "%s: sparse block table outside VHD\n",
+		       VHD_DNAME(vhd));
+		return -EINVAL;
+	}
+
+	vhd->bat = kzalloc(BAT_SZ(vhd->bat_entries), GFP_KERNEL);
+	if (!vhd->bat)
+		return -ENOMEM;
+
+	ret = loop_read_kbuf(vhd->lo, vhd->lo_file, vhd->bat,
+			     BAT_SZ(vhd->bat_entries),
+			     vhd->table_offset);
+	if (ret)
+		return ret;
+
+	len = sizeof(BMP_CACHE_PREFIX) + strlen(VHD_DNAME(vhd));
+	vhd->bmp_cache_name = kzalloc(len, GFP_KERNEL);
+	if (!vhd->bmp_cache_name)
+		return -ENOMEM;
+	strlcat(vhd->bmp_cache_name, VHD_DNAME(vhd), len);
+	strlcat(vhd->bmp_cache_name, BMP_CACHE_PREFIX, len);
+
+	vhd->bmp_cache = kmem_cache_create(vhd->bmp_cache_name,
+					   sizeof(struct vhd_bmp) +
+					   SECTOR_BMP_SZ(vhd->block_unit),
+					   1, 0, NULL);
+	if (!vhd->bmp_cache)
+		return -ENOMEM;
+
+	vhd->bmps = kzalloc(vhd->bat_entries * sizeof(struct vhd_bmp *), GFP_KERNEL);
+	if (!vhd->bmps)
+		return -ENOMEM;
+
+	return 0;
+}
+
+static int vhd_verify_fixed(struct vhd *vhd)
+{
+	if (be64_to_cpu(vhd->footer->data_offset) != FOOTER_DOFF_FIXED) {
+		printk(KERN_ERR "%s: corrupt (data_offset not fixed)\n",
+		       VHD_DNAME(vhd));
+		return -EINVAL;
+	}
+
+	if (vhd->size + FOOTER_SZ(vhd) > vhd->file_size) {
+		printk(KERN_ERR "%s: corrupt (wrong size %lld bytes)\n",
+		       VHD_DNAME(vhd), vhd->size);
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int vhd_verify(struct vhd *vhd)
+{
+	int ret;
+
+	if (vhd->footer->cookie != FOOTER_COOKIE) {
+		printk(KERN_ERR "%s: corrupt footer\n",
+		       VHD_DNAME(vhd));
+		return -EINVAL;
+	}
+
+	if (!(be32_to_cpu(vhd->footer->features) & FOOTER_FEAT_RSVD)) {
+		printk(KERN_ERR "%s: corrupt (bad features 0x%x)\n",
+		       VHD_DNAME(vhd),
+		       be32_to_cpu(vhd->footer->features));
+		return -EINVAL;
+	}
+
+	if ((be32_to_cpu(vhd->footer->file_format_ver) &
+	     VHD_VMAJ_MASK) != VHD_VERSION_1) {
+		printk(KERN_ERR "%s: corrupt (bad version 0x%x)\n",
+		       VHD_DNAME(vhd),
+		       be32_to_cpu(vhd->footer->file_format_ver));
+		return -EINVAL;
+	}
+
+	vhd->size = be64_to_cpu(vhd->footer->current_size);
+	vhd->type = be32_to_cpu(vhd->footer->disk_type);
+	ret = vhd_chs(vhd);
+	if (ret) {
+		printk(KERN_ERR "%s: corrupt (bad CHS data)\n",
+		       VHD_DNAME(vhd));
+		return ret;
+	}
+
+	if (vhd->type == FOOTER_TYPE_FIXED) {
+		ret = vhd_verify_fixed(vhd);
+		if (ret)
+			return ret;
+	} else if (vhd->type == FOOTER_TYPE_DYN) {
+		ret = vhd_verify_dyn(vhd);
+		if (ret)
+			return ret;
+	} else {
+		printk(KERN_ERR "%s: only fixed and dynamic VHDs supported\n",
+		       VHD_DNAME(vhd));
+	       return -EINVAL;
+	}
+
+	return ret;
+}
+
+static int vhd_meta_flush(struct vhd *vhd)
+{
+	int ret;
+	u32 bat_index;
+	struct vhd_bmp *bmp;
+
+	if (vhd->bmps) {
+		for (bat_index = 0; bat_index < vhd->bat_entries; bat_index++) {
+			bmp = vhd->bmps[bat_index];
+			if (bmp && (bmp->flags & VHD_BMP_DIRTY)) {
+				ret = loop_write_kbuf(vhd->lo, vhd->lo_file, &bmp->bmp,
+						      SECTOR_BMP_SZ(vhd->block_unit),
+						      be32_to_cpu(vhd->bat[bat_index]) << SEC_SHIFT);
+				if (ret) {
+					printk(KERN_ERR "%s: failed to flush bitmap for block %d\n",
+					       VHD_DNAME(vhd), bat_index);
+					return ret;
+				} else
+					bmp->flags ^= VHD_BMP_DIRTY;
+			}
+		}
+	}
+
+	if (vhd->flags & VHD_BAT_DIRTY) {
+		ret = loop_write_kbuf(vhd->lo, vhd->lo_file, vhd->bat,
+				      BAT_SZ(vhd->bat_entries),
+				      vhd->table_offset);
+		if (ret) {
+			printk(KERN_ERR "%s: failed to flush BAT\n",
+			       VHD_DNAME(vhd));
+			return ret;
+		} else
+			vhd->flags ^= VHD_BAT_DIRTY;
+
+		ret = loop_write_kbuf(vhd->lo, vhd->lo_file, vhd->footer,
+				      FOOTER_SZ(vhd),
+				      vhd->file_size - FOOTER_SZ(vhd));
+		if (ret) {
+			printk(KERN_ERR "%s: failed to flush footer\n",
+			       VHD_DNAME(vhd));
+			return ret;
+		}
+	}
+	return 0;
+}
+
+static void vhd_free(struct vhd *vhd)
+{
+	u32 bat_index;
+
+	if (vhd_meta_flush(vhd))
+		printk(KERN_ERR "%s: failed to flush metadata, expect corruption\n",
+		       VHD_DNAME(vhd));
+
+	if (vhd->bmps) {
+		for (bat_index = 0; bat_index < vhd->bat_entries; bat_index++) {
+			if (vhd->bmps[bat_index]) {
+				kmem_cache_free(vhd->bmp_cache, vhd->bmps[bat_index]);
+				vhd->bmps[bat_index] = NULL;
+			}
+		}
+
+		kfree(vhd->bmps);
+                vhd->bmps = NULL;
+	}
+
+	if (vhd->bmp_cache) {
+		kmem_cache_destroy(vhd->bmp_cache);
+		vhd->bmp_cache = NULL;
+	}
+
+	if (vhd->bmp_cache_name) {
+		kfree(vhd->bmp_cache_name);
+		vhd->bmp_cache_name = NULL;
+	}
+
+	if (vhd->bat) {
+		kfree(vhd->bat);
+		vhd->bat = NULL;
+	}
+
+	kfree(vhd);
+}
+
+static int vhd_init(struct loop_device *lo, struct lo_file *lo_file)
+{
+	int ret;
+	struct vhd *vhd;
+	BUILD_BUG_ON(sizeof(struct vhd_dyn) != 1024);
+	BUILD_BUG_ON(sizeof(struct vhd_footer) != 512);
+
+	vhd = kzalloc(sizeof(struct vhd), GFP_KERNEL);
+	if (!vhd)
+		return -ENOMEM;
+
+	vhd->lo = lo;
+	vhd->lo_file = lo_file;
+	vhd->file_size = i_size_read(lo_file->file->f_mapping->host);
+	ret = loop_read_kbuf(lo, lo_file, &vhd->footer_data,
+			     sizeof(vhd->footer_data),
+			     vhd->file_size - sizeof(vhd->footer_data));
+	if (ret)
+		goto out;
+
+	vhd->footer = vhd_check_footer(&vhd->footer_data);
+	if (!vhd->footer) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	ret = vhd_verify(vhd);
+	if (ret) {
+		/* Invalid format, ensure other parsers don't bind. */
+		ret = -EPERM;
+		goto out;
+	}
+
+	printk(KERN_INFO "%s: %s VHD %lld bytes\n",
+	       VHD_DNAME(vhd),
+	       vhd->type == FOOTER_TYPE_DYN ? "dynamic" : "fixed",
+	       vhd->size);
+	lo_file->parser_priv = vhd;
+out:
+	if (ret)
+		vhd_free(vhd);
+	return ret;
+}
+
+static void vhd_release(struct loop_device *lo, struct lo_file *lo_file)
+{
+	struct vhd *vhd = lo_file->parser_priv;
+	lo_file->parser_priv = NULL;
+	vhd_free(vhd);
+}
+
+static loff_t vhd_size(struct loop_device *lo)
+{
+	struct vhd *vhd = lo->lo_file.parser_priv;
+	return vhd->size >> SEC_SHIFT;
+}
+
+static int vhd_sync(struct loop_device *lo)
+{
+	int ret;
+	struct vhd *vhd = lo->lo_file.parser_priv;
+
+	ret = vhd_meta_flush(vhd);
+	if (ret)
+		return ret;
+
+	return loop_sync(lo, &lo->lo_file);
+}
+
+static int vhd_sparse_to(struct lo_file **lo_file,
+			 struct bio *bio,
+			 loff_t pos,
+			 unsigned int *len,
+			 loff_t *fpos)
+{
+	int ret;
+	loff_t block_fpos;
+	loff_t bat_entry = pos;
+	struct vhd *vhd = (*lo_file)->parser_priv;
+	u32 offset = do_div(bat_entry, vhd->block_unit);
+	*len = min(*len, (unsigned int) ((SEC_SZ - (pos & (SEC_SZ - 1)))));
+
+	block_fpos = be32_to_cpu(vhd->bat[bat_entry]);;
+	if (block_fpos == 0xFFFFFFFF) {
+		if (bio_rw(bio) != WRITE)
+			return -ENOENT;
+
+		vhd->bmps[bat_entry] = kmem_cache_zalloc(vhd->bmp_cache,
+                                                         GFP_KERNEL);
+		if (!vhd->bmps[bat_entry])
+			return -ENOMEM;
+		vhd->bmps[bat_entry]->flags |= VHD_BMP_DIRTY;
+
+		block_fpos = round_up(vhd->file_size - FOOTER_SZ(vhd), SEC_SZ);
+		vhd->file_size = block_fpos + vhd->block_unit + FOOTER_SZ(vhd);
+		vhd->bat[bat_entry] = cpu_to_be32(block_fpos >> SEC_SHIFT);
+		vhd->flags |= VHD_BAT_DIRTY;
+	} else
+		block_fpos <<= SEC_SHIFT;
+
+	if (!vhd->bmps[bat_entry]) {
+		if (block_fpos > vhd->file_size ||
+		    (block_fpos + SECTOR_BMP_SZ(vhd->block_unit)) > vhd->file_size)
+			return -EINVAL;
+
+		vhd->bmps[bat_entry] = kmem_cache_zalloc(vhd->bmp_cache, GFP_KERNEL);
+		if (!vhd->bmps[bat_entry])
+			return -ENOMEM;
+
+		ret = loop_read_kbuf(vhd->lo, vhd->lo_file, &vhd->bmps[bat_entry]->bmp,
+				     SECTOR_BMP_SZ(vhd->block_unit), block_fpos);
+		if (ret) {
+			kmem_cache_free(vhd->bmp_cache,
+					vhd->bmps[bat_entry]);
+			vhd->bmps[bat_entry] = NULL;
+			return ret;
+		}
+	}
+
+	/*
+	 * Bits within byte actually have a reversed meaning,
+	 * where MSB is the lower sector number.
+	 */
+	if (bio_rw(bio) != WRITE) {
+		if (!(vhd->bmps[bat_entry]->bmp[offset >> (SEC_SHIFT + 3)] &
+		      (1 << (7 - ((offset >> SEC_SHIFT) & 7)))))
+			return -ENOENT;
+	} else {
+		vhd->bmps[bat_entry]->bmp[offset >> (SEC_SHIFT + 3)] |=
+			1 << (7 - (((offset >> SEC_SHIFT) & 7)));
+		vhd->bmps[bat_entry]->flags |= VHD_BMP_DIRTY;
+	}
+
+	block_fpos += SECTOR_BMP_SZ(vhd->block_unit) + offset;
+	if (block_fpos > vhd->file_size ||
+	    (block_fpos + *len) > vhd->file_size)
+		return -EINVAL;
+
+	*fpos = block_fpos;
+	return 0;
+}
+
+static int vhd_read(struct loop_device *lo, struct bio *bio)
+{
+	struct vhd *vhd = lo->lo_file.parser_priv;
+
+	if (vhd->type == FOOTER_TYPE_FIXED)
+		return loop_recv(lo, &lo->lo_file, bio,
+				 ((loff_t) bio->bi_sector << SEC_SHIFT),
+				 NULL);
+
+	return loop_sparse_io(lo, bio, vhd_sparse_to);
+}
+
+static int vhd_write(struct loop_device *lo, struct bio *bio)
+{
+	struct vhd *vhd = lo->lo_file.parser_priv;
+
+	if (vhd->type == FOOTER_TYPE_FIXED)
+		return loop_send(lo, &lo->lo_file, bio,
+				 ((loff_t) bio->bi_sector << SEC_SHIFT),
+				 NULL);
+
+	return loop_sparse_io(lo, bio, vhd_sparse_to);
+}
+
+static struct loop_parser vhd_parser =
+{
+	.name = "vhd",
+	.init = vhd_init,
+	.release = vhd_release,
+	.sync = vhd_sync,
+	.size = vhd_size,
+	.read = vhd_read,
+	.write = vhd_write,
+	.owner = THIS_MODULE
+};
+
+static int __init
+init_vhdloop(void)
+{
+	int ret = loop_register_parser(&vhd_parser);
+	if (ret)
+		printk(KERN_ERR "vhdloop: loop_register_parser failed\n");
+	return ret;
+}
+
+static void __exit
+cleanup_vhdloop(void)
+{
+	if (loop_unregister_parser(&vhd_parser))
+		printk(KERN_ERR "vhdloop: loop_unregister_parser failed\n");
+}
+
+module_init(init_vhdloop);
+module_exit(cleanup_vhdloop);
-- 
1.7.7

