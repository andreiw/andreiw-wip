From 44191fbdca455710652b8569e265889bbeb280c4 Mon Sep 17 00:00:00 2001
From: Andrei Warkentin <andrey.warkentin@gmail.com>
Date: Mon, 17 Oct 2011 01:17:22 -0400
Subject: [PATCH 4/5] Loop: QCOW loop parser implementation.

QCOWv1 support (read/write, COW).

The only thing missing is RO compression and
encryption support. And, of course, QCOWv2
support.

Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com>
---
 drivers/block/Kconfig    |    8 +
 drivers/block/Makefile   |    1 +
 drivers/block/qcowloop.c |  425 ++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 434 insertions(+), 0 deletions(-)
 create mode 100644 drivers/block/qcowloop.c

diff --git a/drivers/block/Kconfig b/drivers/block/Kconfig
index c7f391e..ed14cbc 100644
--- a/drivers/block/Kconfig
+++ b/drivers/block/Kconfig
@@ -298,6 +298,14 @@ config BLK_DEV_VHDLOOP
 	  Say Y here if you want to be able to use VHD images
 	  as disks using the loop device.
 
+config BLK_DEV_QCOWLOOP
+	tristate "QCOW loop support"
+	depends on BLK_DEV_LOOP
+	select BLK_DEV_LOOP_UTIL
+	---help---
+	  Say Y here if you want to be able to use QCOW images
+	  as disks using the loop device.
+
 source "drivers/block/drbd/Kconfig"
 
 config BLK_DEV_NBD
diff --git a/drivers/block/Makefile b/drivers/block/Makefile
index caf5b8e..619635c 100644
--- a/drivers/block/Makefile
+++ b/drivers/block/Makefile
@@ -30,6 +30,7 @@ obj-$(CONFIG_BLK_DEV_NBD)	+= nbd.o
 obj-$(CONFIG_BLK_DEV_CRYPTOLOOP) += cryptoloop.o
 obj-$(CONFIG_BLK_DEV_LOOP_UTIL)	+= looputil.o
 obj-$(CONFIG_BLK_DEV_VHDLOOP)	+= vhdloop.o
+obj-$(CONFIG_BLK_DEV_QCOWLOOP)	+= qcowloop.o
 obj-$(CONFIG_VIRTIO_BLK)	+= virtio_blk.o
 
 obj-$(CONFIG_VIODASD)		+= viodasd.o
diff --git a/drivers/block/qcowloop.c b/drivers/block/qcowloop.c
new file mode 100644
index 0000000..6cb0e28f
--- /dev/null
+++ b/drivers/block/qcowloop.c
@@ -0,0 +1,425 @@
+/*
+   Linux loop QCOW support.
+
+   Copyright (C) 2011 Andrei Warkentin <andreiw@vmware.com>
+
+   This module is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This module is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this module; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/loop.h>
+#include <linux/looputil.h>
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("loop QCOW parser");
+MODULE_AUTHOR("Andrei Warkentin <andreiw@vmware.com>");
+
+#define QCOW_MAGIC		(*(u32 *) "QFI\xfb")
+#define QCOW_DNAME(qcow)	((qcow)->lo->lo_disk->disk_name)
+#define L1_SIZE(entries)	((entries) * sizeof(u64))
+#define L2_SIZE(entries)	((entries) * sizeof(u64))
+#define B2M(bits)		((1 << (bits)) - 1)
+#define SEC_SHIFT		(9)
+#define SEC_SZ			(1 << SEC_SHIFT)
+
+struct qcow_header {
+	u32 magic;
+	u32 version;
+
+	u64 backing_file_offset;
+	u32 backing_file_size;
+	u32 mtime;
+
+	u64 size;
+
+	u8 cluster_bits;
+	u8 l2_bits;
+	u32 crypt_method;
+
+	u64 l1_table_offset;
+};
+
+struct qcow
+{
+	struct loop_device *lo;
+	struct lo_file *lo_file;
+	struct lo_file  *backing;
+	struct qcow_header header;
+	loff_t file_size;
+
+	/* Parsed and created from header. */
+	u64 l1_entries;
+	u64 l2_entries;
+	loff_t cluster_size;
+	unsigned int access_size;
+	char *backing_name;
+};
+
+static struct loop_parser qcow_parser;
+
+static int qcow_verify(struct loop_device *lo, struct qcow *qcow)
+{
+	int ret = 0;
+
+	qcow->header.version = be32_to_cpu(qcow->header.version);
+	if (qcow->header.version != 1) {
+		printk(KERN_ERR "%s: unsupported version %d\n",
+		       QCOW_DNAME(qcow),
+		       qcow->header.version);
+		return -EINVAL;
+	}
+
+	qcow->header.backing_file_offset = be64_to_cpu(qcow->header.backing_file_offset);
+	qcow->header.backing_file_size = be32_to_cpu(qcow->header.backing_file_size);
+	if (qcow->header.backing_file_offset > qcow->file_size ||
+	    (qcow->header.backing_file_offset +
+	     qcow->header.backing_file_size) > qcow->file_size) {
+		printk(KERN_ERR "%s: corrupt backing file data\n",
+		       QCOW_DNAME(qcow));
+		return -EINVAL;
+	}
+	if (qcow->header.backing_file_size) {
+		qcow->backing_name = kzalloc(qcow->header.backing_file_size + 1,
+					     GFP_KERNEL);
+		if (!qcow->backing_name)
+			return -ENOMEM;
+		
+		ret = loop_read_kbuf(lo, qcow->lo_file,
+				     qcow->backing_name,
+				     qcow->header.backing_file_size,
+				     qcow->header.backing_file_offset);
+		if (ret)
+			goto out;
+	}
+
+	qcow->header.size = be64_to_cpu(qcow->header.size);
+	qcow->header.crypt_method = be32_to_cpu(qcow->header.crypt_method);
+
+	if (qcow->header.crypt_method != 0) {
+		printk(KERN_ERR "%s: encryption unsupported\n",
+		       QCOW_DNAME(qcow));
+		ret = -EINVAL;
+		goto out;
+	}
+	qcow->header.l1_table_offset = be64_to_cpu(qcow->header.l1_table_offset);
+	qcow->cluster_size = 1 << qcow->header.cluster_bits;
+	qcow->access_size = (unsigned int) min(qcow->cluster_size, (loff_t) PAGE_SIZE);
+	qcow->l2_entries = 1 << qcow->header.l2_bits;
+	qcow->l1_entries = qcow->header.size;
+	qcow->l1_entries = round_up(qcow->l1_entries, qcow->l2_entries * qcow->cluster_size);
+	do_div(qcow->l1_entries, qcow->l2_entries * qcow->cluster_size);
+	if ((qcow->header.l1_table_offset + L1_SIZE(qcow->l1_entries)) >
+	    qcow->file_size) {
+		printk(KERN_ERR "%s: corrupt L1 offset/entries\n",
+		       QCOW_DNAME(qcow));
+		ret = -EINVAL;
+		goto out;
+	}
+	return 0;
+out:
+	kfree(qcow->backing_name);
+	return ret;
+}
+
+static struct qcow *qcow_parse(struct loop_device *lo,
+			       struct lo_file *lo_file)
+{
+	int ret;
+	struct qcow *qcow;
+
+	qcow = kzalloc(sizeof(struct qcow), GFP_KERNEL);
+	if (!qcow)
+		return ERR_PTR(-ENOMEM);
+
+	qcow->lo = lo;
+	qcow->lo_file = lo_file;
+	qcow->file_size = i_size_read(lo_file->file->f_mapping->host);
+	ret = loop_read_kbuf(lo, lo_file, &qcow->header,
+			     sizeof(qcow->header),
+			     0);
+	if (ret)
+		goto out;
+
+	if (qcow->header.magic != QCOW_MAGIC) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	ret = qcow_verify(lo, qcow);
+	if (ret) {
+		/* Invalid format, ensure other parsers don't bind. */
+		ret = -EPERM;
+		goto out;
+	}
+
+out:
+	if (ret) {
+		kfree(qcow);
+		return ERR_PTR(ret);
+	}
+	return qcow;
+}
+
+static bool qcow_match_name(char *name,
+			    char *against)
+{
+
+	/* Look for 'name' in 'against'. */
+	char *found = strstr(against, name);
+	if (!found)
+		return false;
+
+	/* I.e. it's a leaf, not part of a path. */
+	if (strlen(found) != strlen(name))
+		return false;
+
+	return true;
+}
+
+static int qcow_change(struct loop_device *lo,
+		       struct lo_file *old_lo_file,
+		       struct lo_file *new_lo_file)
+{
+	struct qcow *qcow = old_lo_file->parser_priv;
+	struct qcow *new_qcow = qcow_parse(lo, new_lo_file);
+	if (IS_ERR(new_qcow)) {
+		new_qcow = NULL;
+		printk(KERN_ERR "%s: changed-to image not QCOW\n",
+		       QCOW_DNAME(qcow));
+		goto out;
+	}
+	new_lo_file->parser_priv = new_qcow;
+
+	if (qcow->header.size != new_qcow->header.size) {
+		printk(KERN_ERR "%s: changed-to image mismatched disk size\n",
+		       QCOW_DNAME(qcow));
+		goto out;
+	}
+
+	if (new_qcow->backing_name) {
+		if (!qcow_match_name(new_qcow->backing_name,
+				    lo->lo_file_name)) {
+			printk(KERN_ERR "%s: changed-to image parent doesn't match (%s vs %s)\n",
+			       QCOW_DNAME(qcow),
+			       new_qcow->backing_name,
+			       lo->lo_file_name);
+			goto out;
+		}
+
+		/* Check file name against lo_file_name. */
+		atomic_inc(&old_lo_file->ref);
+		new_qcow->backing = old_lo_file;
+	} else {
+		/* For non-COW cases, the loop device has to be read-only */
+		if (!(lo->lo_flags & LO_FLAGS_READ_ONLY)) {
+			printk(KERN_ERR "%s: non-COW change permitted only on RO disks\n",
+			       QCOW_DNAME(qcow));
+			goto out;
+		}
+	}
+
+	return 0;
+out:
+
+	/* Clean-up happens in loop_lo_file_put->qcow_release(). */
+	return -EINVAL;
+}
+
+static int qcow_init(struct loop_device *lo, struct lo_file *lo_file)
+{
+	struct qcow *qcow = qcow_parse(lo, lo_file);
+	if (IS_ERR(qcow))
+		return PTR_ERR(qcow);
+
+	printk(KERN_INFO "%s: QCOW %lld bytes\n",
+	       QCOW_DNAME(qcow),
+	       qcow->header.size);
+	lo_file->parser_priv = qcow;
+	return 0;
+}
+
+static void qcow_release(struct loop_device *lo, struct lo_file *lo_file)
+{
+	struct qcow *qcow = lo_file->parser_priv;
+
+	if (!qcow)
+		return;
+
+	lo_file->parser_priv = NULL;
+	if (qcow->backing) {
+		loop_lo_file_put(lo, &qcow_parser,
+				 qcow->backing);
+		kfree(qcow->backing_name);
+	}
+	kfree(qcow);
+}
+
+static loff_t qcow_size(struct loop_device *lo, struct lo_file *lo_file)
+{
+	struct qcow *qcow = lo_file->parser_priv;
+	return qcow->header.size >> SEC_SHIFT;
+}
+
+static int qcow_sync(struct loop_device *lo, struct lo_file *lo_file)
+{
+	return loop_sync(lo, lo_file);
+}
+
+static int qcow_sparse_to(struct lo_file **lo_file,
+			  struct bio *bio,
+			  loff_t pos,
+			  unsigned int *len,
+			  loff_t *fpos)
+{
+	int ret;
+	u64 l1_index, l2_index;
+	loff_t l2pos, temp, ffpos;
+	struct qcow *qcow;
+
+retry:
+	qcow = (*lo_file)->parser_priv;
+	l1_index = pos >> (qcow->header.l2_bits +
+			   qcow->header.cluster_bits);
+	*len = min(*len, (unsigned int) ((qcow->access_size -
+					  (pos & (qcow->access_size - 1)))));
+
+	if (l1_index >= qcow->l1_entries)
+		return -EINVAL;
+
+	ret = loop_read_kbuf(qcow->lo, qcow->lo_file, &l2pos,
+			     sizeof(u64),
+			     qcow->header.l1_table_offset +
+			     l1_index * sizeof(u64));
+	if (ret)
+		return ret;
+	l2pos = be64_to_cpu(l2pos);
+
+	if (!l2pos) {
+		if (bio_rw(bio) != WRITE) {
+			if (qcow->backing) {
+				*lo_file = qcow->backing;
+				goto retry;
+			}
+			return -ENOENT;
+		}
+
+		l2pos = qcow->file_size;
+		temp = cpu_to_be64(l2pos);
+		qcow->file_size += L2_SIZE(qcow->l2_entries);
+
+		ret = loop_write_kbuf(qcow->lo, qcow->lo_file, &temp,
+				      sizeof(u64),
+				      qcow->header.l1_table_offset +
+				      l1_index * sizeof(u64));
+		if (ret)
+			return ret;
+
+		ret = loop_write_zero(qcow->lo, qcow->lo_file,
+				      L2_SIZE(qcow->l2_entries),
+				      l2pos);
+		if (ret)
+			return ret;
+	} else if ((l2pos + L2_SIZE(qcow->l2_entries)) >
+		    qcow->file_size) {
+		printk(KERN_ERR "%s: corrupt L1 table\n",
+		       QCOW_DNAME(qcow));
+		return -EINVAL;
+	}
+
+	l2_index = pos >> qcow->header.cluster_bits &
+		B2M(qcow->header.l2_bits);
+
+	ret = loop_read_kbuf(qcow->lo, qcow->lo_file, &ffpos,
+			     sizeof(u64),
+			     l2pos +
+			     l2_index * sizeof(u64));
+	if (ret)
+		return ret;
+
+	ffpos = be64_to_cpu(ffpos);
+	if (!ffpos) {
+		if (bio_rw(bio) != WRITE) {
+			if (qcow->backing) {
+				*lo_file = qcow->backing;
+				goto retry;
+			}
+			return -ENOENT;
+		}
+
+		ffpos = qcow->file_size;
+		temp = cpu_to_be64(ffpos);
+		qcow->file_size += qcow->cluster_size;
+		ret = loop_write_kbuf(qcow->lo, qcow->lo_file, &temp,
+				      sizeof(u64),
+				      l2pos +
+				      l2_index * sizeof(u64));
+		if (ret)
+			return ret;
+
+		ret = loop_write_zero(qcow->lo, qcow->lo_file,
+				      qcow->cluster_size,
+				      ffpos);
+		if (ret)
+                  return ret;
+	} else if ((ffpos + qcow->cluster_size) >
+		   qcow->file_size) {
+		printk(KERN_ERR "%s: corrupt L2 table\n",
+		       QCOW_DNAME(qcow));
+		return -EINVAL;
+	}
+
+	ffpos += pos & B2M(qcow->header.cluster_bits);
+	*fpos = ffpos;
+	return 0;
+}
+
+static int qcow_bio(struct loop_device *lo,
+		    struct lo_file *lo_file,
+		    struct bio *bio)
+{
+	return loop_sparse_io(lo, lo_file, bio, qcow_sparse_to);
+}
+
+static struct loop_parser qcow_parser =
+{
+	.name = "qcow",
+	.init = qcow_init,
+	.release = qcow_release,
+	.sync = qcow_sync,
+	.size = qcow_size,
+	.bio = qcow_bio,
+	.change = qcow_change,
+	.owner = THIS_MODULE
+};
+
+static int __init
+init_qcowloop(void)
+{
+	int ret = loop_register_parser(&qcow_parser);
+	if (ret)
+		printk(KERN_ERR "qcowloop: loop_register_parser failed\n");
+	return ret;
+}
+
+static void __exit
+cleanup_qcowloop(void)
+{
+	if (loop_unregister_parser(&qcow_parser))
+		printk(KERN_ERR "qcowloop: loop_unregister_parser failed\n");
+}
+
+module_init(init_qcowloop);
+module_exit(cleanup_qcowloop);
-- 
1.7.7

