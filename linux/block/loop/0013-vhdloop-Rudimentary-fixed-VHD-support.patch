From b2dc34fef7eb89bd4f84cabc2db3ca50beb1c42a Mon Sep 17 00:00:00 2001
From: Andrei Warkentin <andreiw@motorola.com>
Date: Fri, 12 Aug 2011 15:00:46 -0500
Subject: [PATCH 13/15] vhdloop: Rudimentary fixed VHD support.

Should do more sanity checking as per spec.

Change-Id: I8c7af8d7300dfcf948756b16d966a535ff4b902a
Signed-off-by: Andrei Warkentin <andreiw@motorola.com>
---
 drivers/block/Kconfig   |    7 +
 drivers/block/Makefile  |    1 +
 drivers/block/vhdloop.c |  340 +++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 348 insertions(+), 0 deletions(-)
 create mode 100644 drivers/block/vhdloop.c

diff --git a/drivers/block/Kconfig b/drivers/block/Kconfig
index de27768..b2f6da2 100644
--- a/drivers/block/Kconfig
+++ b/drivers/block/Kconfig
@@ -271,6 +271,13 @@ config BLK_DEV_CRYPTOLOOP
 	  instead, which can be configured to be on-disk compatible with the
 	  cryptoloop device.
 
+config BLK_DEV_VHDLOOP
+	tristate "VHD loop support"
+	depends on BLK_DEV_LOOP
+	---help---
+	  Say Y here if you want to be able to use VHD images
+	  as disks using the loop device.
+
 source "drivers/block/drbd/Kconfig"
 
 config BLK_DEV_NBD
diff --git a/drivers/block/Makefile b/drivers/block/Makefile
index aff5ac9..49f46eb 100644
--- a/drivers/block/Makefile
+++ b/drivers/block/Makefile
@@ -28,6 +28,7 @@ obj-$(CONFIG_BLK_DEV_OSD)	+= osdblk.o
 obj-$(CONFIG_BLK_DEV_UMEM)	+= umem.o
 obj-$(CONFIG_BLK_DEV_NBD)	+= nbd.o
 obj-$(CONFIG_BLK_DEV_CRYPTOLOOP) += cryptoloop.o
+obj-$(CONFIG_BLK_DEV_VHDLOOP)	+= vhdloop.o
 obj-$(CONFIG_VIRTIO_BLK)	+= virtio_blk.o
 
 obj-$(CONFIG_VIODASD)		+= viodasd.o
diff --git a/drivers/block/vhdloop.c b/drivers/block/vhdloop.c
new file mode 100644
index 0000000..b489107
--- /dev/null
+++ b/drivers/block/vhdloop.c
@@ -0,0 +1,340 @@
+/*
+   Linux loop VHD support.
+
+   Copyright (C) 2011 Andrei Warkentin <andreiw@motorola.com>
+
+   This module is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This module is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this module; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/loop.h>
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("loop VHD parser");
+MODULE_AUTHOR("Andrei Warkentin <andreiw@motorola.com>");
+
+#define FOOTER_FEAT_RSVD    (2)
+#define FOOTER_VERSION_1    (0x00010000UL)
+#define FOOTER_VMAJ_MASK    (0xFFFF0000UL)
+#define FOOTER_VMIN_MASK    (0x0000FFFFUL)
+#define FOOTER_DOFF_FIXED   (0xFFFFFFFFFFFFFFFFULL)
+#define DYN_DOFF_DYN        (0xFFFFFFFFFFFFFFFFULL)
+#define FOOTER_CREATOR(x)   (*(u32 *) x)
+#define FOOTER_TYPE_FIXED   (2)
+#define FOOTER_TYPE_DYN     (3)
+#define FOOTER_TYPE_DIFF    (4)
+
+/* All fields Big-Endian */
+struct vhd_id
+{
+	u32 f1;
+	u16 f2;
+	u16 f3;
+	u8  f4[8];
+};
+
+/* All fields Big-Endian */
+struct vhd_chs
+{
+	u16 c;
+	u8  h;
+	u8  s;
+};
+
+/* All fields Big-Endian */
+struct vhd_footer
+{
+	u64 cookie;
+	u32 features;
+	u32 file_format_ver;
+	u64 data_offset;
+	u32 time_stamp;
+	u32 creator_app;
+	u32 creator_ver;
+	u32 creator_os;
+	u64 original_size;
+	u64 current_size;
+	struct vhd_chs disk_geometry;
+	u32 disk_type;
+	u32 checksum;
+	struct vhd_id vhd_id;
+	u8 saved_state;
+	u8 reserved[427];
+};
+
+struct vhd
+{
+
+	struct vhd_footer footer_data;
+
+	/*
+	 * Parsed from image. Crazy footer can be
+	 * in last 511 bytes of file, so this points
+	 * somewhere into footer_data.
+	 */
+	struct vhd_footer *footer;
+	loff_t file_size;
+	loff_t size;
+	u32 type;
+	u32 features;
+	u32 version;
+};
+
+static int vhd_chs(struct vhd *vhd)
+{
+	u64 temp;
+	u64 cyl_x_heads;
+	u64 sectors = vhd->size >> 9;
+	struct vhd_chs chs;
+
+	/*
+	 * Blame AndrewN for this one... All this logic is from
+	 * the VHD specification.
+	 */
+	if (sectors > 65535 * 16 * 255) {
+
+		/* ~127GiB */
+		sectors =  65535 * 16 * 255;
+	}
+	if (sectors >= 65535 * 16 * 63) {
+		chs.s = 255;
+		chs.h = 16;
+		cyl_x_heads = sectors;
+		do_div(cyl_x_heads, chs.s);
+	} else {
+		chs.s = 17;
+		cyl_x_heads = sectors;
+		do_div(cyl_x_heads, chs.s);
+		chs.h = (cyl_x_heads + 1023) / 1024;
+		if (chs.h < 4)
+			chs.h = 4;
+
+		if (cyl_x_heads >= (chs.h * 1024) || chs.h > 16) {
+			chs.s = 31;
+			chs.h = 16;
+			cyl_x_heads = sectors;
+			do_div(cyl_x_heads, chs.s);
+		}
+		if (cyl_x_heads >= (chs.h * 1024)) {
+			chs.s = 63;
+			chs.h = 16;
+			cyl_x_heads = sectors;
+			do_div(cyl_x_heads, chs.s);
+		}
+	}
+	temp = cyl_x_heads;
+	do_div(temp, chs.h);
+	chs.c = temp;
+
+	if (be16_to_cpu(vhd->footer->disk_geometry.c) != chs.c ||
+	    vhd->footer->disk_geometry.h != chs.h ||
+	    vhd->footer->disk_geometry.s != chs.s) {
+		return -EINVAL;
+	}
+
+	/*
+	 * At some point we'll have the ability to pass options
+	 * to the parser from losetup, and we can add the option
+	 * to clamp size to CHS-implied size, as you can have VHDs
+	 * whose size doesn't match CHS-implied size. This may be
+	 * seen in Hyper-V moving a VHD from SCSI to ATA.
+	 */
+	return 0;
+}
+
+static u32 vhd_checksum(uint8_t *data, off_t size)
+{
+	uint32_t csum = 0;
+	while (size--) {
+		csum += *data++;
+	}
+	return ~csum;
+}
+
+static int vhd_footer_csum(struct vhd_footer *footer)
+{
+	u32 nsum;
+	u32 csum = footer->checksum;
+	footer->checksum = 0;
+	nsum = vhd_checksum((u8 *) footer, sizeof(*footer));
+	footer->checksum = csum;
+	if (nsum != be32_to_cpu(csum)) {
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static struct vhd_footer *vhd_check_footer(struct vhd_footer *footer)
+{
+	struct vhd_footer *f = footer;
+	if (vhd_footer_csum(f)) {
+
+		/* Could be < VPC2004 version, with 511-byte header. */
+		f = (struct vhd_footer *)((u8 *) footer + 1);
+		if (vhd_footer_csum(f)) {
+			return NULL;
+		}
+	}
+
+	return f;
+}
+
+static int vhd_verify(struct loop_device *lo, struct vhd *vhd)
+{
+	vhd->type = be32_to_cpu(vhd->footer->disk_type);
+	if (vhd->type != FOOTER_TYPE_FIXED) {
+		printk(KERN_ERR "%s: only fixed VHDs supported\n",
+			lo->lo_disk->disk_name);
+		return -EPERM;
+	}
+
+	vhd->features = be32_to_cpu(vhd->footer->features);
+	if (!(vhd->features & FOOTER_FEAT_RSVD)) {
+		printk(KERN_ERR "%s: corrupt (bad features 0x%x)\n",
+		       lo->lo_disk->disk_name,
+		       vhd->features);
+	}
+
+	vhd->version = be32_to_cpu(vhd->footer->file_format_ver);
+	if ((vhd->version & FOOTER_VMAJ_MASK) != FOOTER_VERSION_1) {
+		printk(KERN_ERR "%s: corrupt (bad version 0x%x)\n",
+		       lo->lo_disk->disk_name,
+		       vhd->version);
+		return -EPERM;
+	}
+
+	vhd->size = be64_to_cpu(vhd->footer->current_size);
+	if (vhd_chs(vhd)) {
+		printk(KERN_ERR "%s: corrupt (bad CHS data)\n",
+		       lo->lo_disk->disk_name);
+		return -EPERM;
+	}
+
+	if (be64_to_cpu(vhd->footer->data_offset) != FOOTER_DOFF_FIXED) {
+		printk(KERN_ERR "%s: corrupt (data_offset not fixed)\n",
+		       lo->lo_disk->disk_name);
+		return -EPERM;
+	}
+
+	if ((vhd->size + sizeof(struct vhd_footer) -
+	     ((ptrdiff_t) vhd->footer - (ptrdiff_t) &vhd->footer_data)) !=
+	    vhd->file_size) {
+		printk(KERN_ERR "%s: corrupt (wrong size %lld bytes)\n",
+		       lo->lo_disk->disk_name, vhd->size);
+		return -EPERM;
+	}
+	return 0;
+}
+
+static int vhd_init(struct loop_device *lo, struct lo_file *lo_file)
+{
+	int ret;
+	struct vhd *vhd;
+	BUILD_BUG_ON(sizeof(struct vhd_footer) != 512);
+
+	vhd = kmalloc(sizeof(struct vhd), GFP_KERNEL);
+	if (!vhd)
+		return -ENOMEM;
+
+	vhd->file_size = i_size_read(lo_file->file->f_mapping->host);
+	ret = loop_parser_io(lo, lo_file, &vhd->footer_data,
+			     sizeof(vhd->footer_data),
+			     vhd->file_size - sizeof(vhd->footer_data), READ);
+	if (ret)
+		goto out;
+
+	vhd->footer = vhd_check_footer(&vhd->footer_data);
+	if (!vhd->footer)
+		goto out;
+
+	ret = vhd_verify(lo, vhd);
+	if (ret)
+		goto out;
+
+	printk(KERN_INFO "%s: fixed VHD %lld bytes\n",
+	       lo->lo_disk->disk_name, vhd->size);
+	lo_file->parser_priv = vhd;
+out:
+	if (ret)
+		kfree(vhd);
+	return ret;
+}
+
+static void vhd_release(struct loop_device *lo, struct lo_file *lo_file)
+{
+	struct vhd *vhd = lo_file->parser_priv;
+	lo_file->parser_priv = NULL;
+	kfree(vhd);
+}
+
+static loff_t vhd_size(struct loop_device *lo, struct lo_file *lo_file)
+{
+	struct vhd *vhd = lo_file->parser_priv;
+	return vhd->size >> 9;
+}
+
+static int vhd_flush(struct loop_device *lo, struct lo_file *lo_file)
+{
+	return 0;
+}
+
+static struct bio_vec *vhd_transform(struct loop_device *lo,
+				     struct lo_file *lo_file,
+				     loff_t pos, loff_t *fpos,
+				     struct bio_vec *in,
+				     struct bio_vec *out,
+				     struct bio_vec *rem)
+{
+	*fpos = pos;
+
+	/* Ensures "remainder" bvec is never examined in
+	   lo_send and lo_receive. */
+	rem->bv_len = 0;
+
+	/* No need to split bvec as data is always contiguous. */
+	return in;
+}
+
+static struct loop_parser vhd_parser =
+{
+	.name = "vhd",
+	.init = vhd_init,
+	.release = vhd_release,
+	.flush = vhd_flush,
+	.size = vhd_size,
+	.transform = vhd_transform,
+	.owner = THIS_MODULE
+};
+
+static int __init
+init_vhdloop(void)
+{
+	int ret = loop_register_parser(&vhd_parser);
+	if (ret)
+		printk(KERN_ERR "vhdloop: loop_register_parser failed\n");
+	return ret;
+}
+
+static void __exit
+cleanup_vhdloop(void)
+{
+	if (loop_unregister_parser(&vhd_parser))
+		printk(KERN_ERR "vhdloop: loop_unregister_parser failed\n");
+}
+
+module_init(init_vhdloop);
+module_exit(cleanup_vhdloop);
-- 
1.7.0.4

