From 1c8494e33ee1dc90050d2a30d0d8cdd251978eac Mon Sep 17 00:00:00 2001
From: Andrei Warkentin <andrey.warkentin@gmail.com>
Date: Sun, 25 Sep 2011 23:36:19 -0400
Subject: [PATCH 1/5] Loop: Loop parser support.

Loop parsers allow the loop device to understand sparse
disk image formats, such as VMDK, VHD and QCOW.

Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com>
---
 drivers/block/loop.c |  636 +++++++++++++++++++++++++++++++++-----------------
 include/linux/loop.h |   65 +++++-
 2 files changed, 480 insertions(+), 221 deletions(-)

diff --git a/drivers/block/loop.c b/drivers/block/loop.c
index 4720c7a..f8565ce 100644
--- a/drivers/block/loop.c
+++ b/drivers/block/loop.c
@@ -80,9 +80,12 @@
 
 static DEFINE_IDR(loop_index_idr);
 static DEFINE_MUTEX(loop_index_mutex);
+static LIST_HEAD(loop_parsers);
+static DEFINE_MUTEX(loop_parsers_mutex);
 
 static int max_part;
 static int part_shift;
+static struct loop_parser raw_parser;
 
 /*
  * Transfer functions
@@ -159,47 +162,17 @@ static struct loop_func_table *xfer_funcs[MAX_LO_CRYPT] = {
 	&xor_funcs
 };
 
-static loff_t get_loop_size(struct loop_device *lo, struct file *file)
-{
-	loff_t size, offset, loopsize;
-
-	/* Compute loopsize in bytes */
-	size = i_size_read(file->f_mapping->host);
-	offset = lo->lo_offset;
-	loopsize = size - offset;
-	if (lo->lo_sizelimit > 0 && lo->lo_sizelimit < loopsize)
-		loopsize = lo->lo_sizelimit;
-
-	/*
-	 * Unfortunately, if we want to do I/O on the device,
-	 * the number of 512-byte sectors has to fit into a sector_t.
-	 */
-	return loopsize >> 9;
-}
-
 static int
 figure_loop_size(struct loop_device *lo)
 {
-	loff_t size = get_loop_size(lo, lo->lo_backing_file);
-	sector_t x = (sector_t)size;
+	loff_t size = lo->lo_parser->size(lo);
+	sector_t x = (sector_t) size;
 
-	if (unlikely((loff_t)x != size))
+	if (unlikely((loff_t) x != size))
 		return -EFBIG;
 
 	set_capacity(lo->lo_disk, x);
-	return 0;					
-}
-
-static inline int
-lo_do_transfer(struct loop_device *lo, int cmd,
-	       struct page *rpage, unsigned roffs,
-	       struct page *lpage, unsigned loffs,
-	       int size, sector_t rblock)
-{
-	if (unlikely(!lo->transfer))
-		return 0;
-
-	return lo->transfer(lo, cmd, rpage, roffs, lpage, loffs, size, rblock);
+	return 0;
 }
 
 /**
@@ -208,10 +181,13 @@ lo_do_transfer(struct loop_device *lo, int cmd,
  * This is the fast version for backing filesystems which implement the address
  * space operations write_begin and write_end.
  */
-static int do_lo_send_aops(struct loop_device *lo, struct bio_vec *bvec,
-		loff_t pos, struct page *unused)
+static int do_lo_send_aops(struct loop_device *lo,
+			   struct lo_file *lo_file,
+			   loop_xfer_t transfer,
+			   struct bio_vec *bvec,
+			   loff_t pos, struct page *unused)
 {
-	struct file *file = lo->lo_backing_file; /* kudos to NFsckingS */
+	struct file *file = lo_file->file; /* kudos to NFsckingS */
 	struct address_space *mapping = file->f_mapping;
 	pgoff_t index;
 	unsigned offset, bv_offs;
@@ -241,8 +217,8 @@ static int do_lo_send_aops(struct loop_device *lo, struct bio_vec *bvec,
 
 		file_update_time(file);
 
-		transfer_result = lo_do_transfer(lo, WRITE, page, offset,
-				bvec->bv_page, bv_offs, size, IV);
+		transfer_result = transfer(lo, WRITE, page, offset,
+					   bvec->bv_page, bv_offs, size, IV);
 		copied = size;
 		if (unlikely(transfer_result))
 			copied = 0;
@@ -303,9 +279,12 @@ static int __do_lo_send_write(struct file *file,
  * filesystems.
  */
 static int do_lo_send_direct_write(struct loop_device *lo,
-		struct bio_vec *bvec, loff_t pos, struct page *page)
+				   struct lo_file *lo_file,
+				   loop_xfer_t unused,
+				   struct bio_vec *bvec, loff_t pos,
+				   struct page *page)
 {
-	ssize_t bw = __do_lo_send_write(lo->lo_backing_file,
+	ssize_t bw = __do_lo_send_write(lo_file->file,
 			kmap(bvec->bv_page) + bvec->bv_offset,
 			bvec->bv_len, pos);
 	kunmap(bvec->bv_page);
@@ -326,13 +305,16 @@ static int do_lo_send_direct_write(struct loop_device *lo,
  * the transformations in place as we do not have direct access to the
  * destination pages of the backing file.
  */
-static int do_lo_send_write(struct loop_device *lo, struct bio_vec *bvec,
-		loff_t pos, struct page *page)
+static int do_lo_send_write(struct loop_device *lo,
+			    struct lo_file *lo_file,
+			    loop_xfer_t transfer,
+			    struct bio_vec *bvec, loff_t pos,
+			    struct page *page)
 {
-	int ret = lo_do_transfer(lo, WRITE, page, 0, bvec->bv_page,
-			bvec->bv_offset, bvec->bv_len, pos >> 9);
+	int ret = transfer(lo, WRITE, page, 0, bvec->bv_page,
+			   bvec->bv_offset, bvec->bv_len, pos >> 9);
 	if (likely(!ret))
-		return __do_lo_send_write(lo->lo_backing_file,
+		return __do_lo_send_write(lo_file->file,
 				page_address(page), bvec->bv_len,
 				pos);
 	printk(KERN_ERR "loop: Transfer error at byte offset %llu, "
@@ -342,18 +324,22 @@ static int do_lo_send_write(struct loop_device *lo, struct bio_vec *bvec,
 	return ret;
 }
 
-static int lo_send(struct loop_device *lo, struct bio *bio, loff_t pos)
+int loop_send(struct loop_device *lo, struct lo_file *lo_file,
+	      struct bio *bio, loff_t pos, loop_xfer_t transfer)
 {
-	int (*do_lo_send)(struct loop_device *, struct bio_vec *, loff_t,
-			struct page *page);
+	int (*do_lo_send)(struct loop_device *, struct lo_file *, loop_xfer_t,
+			  struct bio_vec *, loff_t, struct page *page);
 	struct bio_vec *bvec;
 	struct page *page = NULL;
 	int i, ret = 0;
 
+	if (!transfer)
+		transfer = transfer_none;
+
 	do_lo_send = do_lo_send_aops;
-	if (!(lo->lo_flags & LO_FLAGS_USE_AOPS)) {
+	if (!(lo_file->flags & LO_FILE_FLAGS_USE_AOPS)) {
 		do_lo_send = do_lo_send_direct_write;
-		if (lo->transfer != transfer_none) {
+		if (transfer != transfer_none) {
 			page = alloc_page(GFP_NOIO | __GFP_HIGHMEM);
 			if (unlikely(!page))
 				goto fail;
@@ -362,7 +348,7 @@ static int lo_send(struct loop_device *lo, struct bio *bio, loff_t pos)
 		}
 	}
 	bio_for_each_segment(bvec, bio, i) {
-		ret = do_lo_send(lo, bvec, pos, page);
+		ret = do_lo_send(lo, lo_file, transfer, bvec, pos, page);
 		if (ret < 0)
 			break;
 		pos += bvec->bv_len;
@@ -379,8 +365,11 @@ fail:
 	goto out;
 }
 
+EXPORT_SYMBOL(loop_send);
+
 struct lo_read_data {
 	struct loop_device *lo;
+	loop_xfer_t transfer;
 	struct page *page;
 	unsigned offset;
 	int bsize;
@@ -402,13 +391,16 @@ lo_splice_actor(struct pipe_inode_info *pipe, struct pipe_buffer *buf,
 	if (size > p->bsize)
 		size = p->bsize;
 
-	if (lo_do_transfer(lo, READ, page, buf->offset, p->page, p->offset, size, IV)) {
+	if (p->transfer(lo, READ, page, buf->offset, p->page, p->offset, size, IV)) {
 		printk(KERN_ERR "loop: transfer error block %ld\n",
 		       page->index);
 		size = -EINVAL;
 	}
 
-	flush_dcache_page(p->page);
+	/* Loop parser can do internal I/O on the file to
+	   kernel buffers, which have no aliasing issues. */
+	if (!PageSlab(p->page))
+		flush_dcache_page(p->page);
 
 	if (size > 0)
 		p->offset += size;
@@ -423,8 +415,8 @@ lo_direct_splice_actor(struct pipe_inode_info *pipe, struct splice_desc *sd)
 }
 
 static int
-do_lo_receive(struct loop_device *lo,
-	      struct bio_vec *bvec, int bsize, loff_t pos)
+do_lo_receive(struct loop_device *lo, struct lo_file *lo_file,
+	      loop_xfer_t transfer, struct bio_vec *bvec, loff_t pos)
 {
 	struct lo_read_data cookie;
 	struct splice_desc sd;
@@ -434,7 +426,8 @@ do_lo_receive(struct loop_device *lo,
 	cookie.lo = lo;
 	cookie.page = bvec->bv_page;
 	cookie.offset = bvec->bv_offset;
-	cookie.bsize = bsize;
+	cookie.bsize = lo_file->blocksize;
+	cookie.transfer = transfer;
 
 	sd.len = 0;
 	sd.total_len = bvec->bv_len;
@@ -442,7 +435,7 @@ do_lo_receive(struct loop_device *lo,
 	sd.pos = pos;
 	sd.u.data = &cookie;
 
-	file = lo->lo_backing_file;
+	file = lo_file->file;
 	retval = splice_direct_to_actor(file, &sd, lo_direct_splice_actor);
 
 	if (retval < 0)
@@ -451,14 +444,17 @@ do_lo_receive(struct loop_device *lo,
 	return 0;
 }
 
-static int
-lo_receive(struct loop_device *lo, struct bio *bio, int bsize, loff_t pos)
+int loop_recv(struct loop_device *lo, struct lo_file *lo_file,
+	      struct bio *bio, loff_t pos, loop_xfer_t transfer)
 {
 	struct bio_vec *bvec;
 	int i, ret = 0;
 
+	if (!transfer)
+		transfer = transfer_none;
+
 	bio_for_each_segment(bvec, bio, i) {
-		ret = do_lo_receive(lo, bvec, bsize, pos);
+		ret = do_lo_receive(lo, lo_file, transfer, bvec, pos);
 		if (ret < 0)
 			break;
 		pos += bvec->bv_len;
@@ -466,33 +462,49 @@ lo_receive(struct loop_device *lo, struct bio *bio, int bsize, loff_t pos)
 	return ret;
 }
 
-static int do_bio_filebacked(struct loop_device *lo, struct bio *bio)
+EXPORT_SYMBOL(loop_recv);
+
+int loop_sync(struct loop_device *lo, struct lo_file *lo_file)
 {
-	loff_t pos;
 	int ret;
+	struct file *file = lo->lo_file->file;
 
-	pos = ((loff_t) bio->bi_sector << 9) + lo->lo_offset;
+	ret = vfs_fsync(file, 0);
+	if (unlikely(ret && ret != -EINVAL))
+		ret = -EIO;
+
+	return ret;
+}
+
+EXPORT_SYMBOL(loop_sync);
+
+static int do_bio_filebacked(struct loop_device *lo, struct bio *bio)
+{
+	int ret;
 
 	if (bio_rw(bio) == WRITE) {
-		struct file *file = lo->lo_backing_file;
 
 		if (bio->bi_rw & REQ_FLUSH) {
-			ret = vfs_fsync(file, 0);
+			ret = lo->lo_parser->sync(lo);
+
 			if (unlikely(ret && ret != -EINVAL)) {
 				ret = -EIO;
 				goto out;
 			}
 		}
 
-		ret = lo_send(lo, bio, pos);
+		ret = lo->lo_parser->bio(lo, bio);
 
 		if ((bio->bi_rw & REQ_FUA) && !ret) {
-			ret = vfs_fsync(file, 0);
-			if (unlikely(ret && ret != -EINVAL))
+			ret = lo->lo_parser->sync(lo);
+
+			if (unlikely(ret && ret != -EINVAL)) {
 				ret = -EIO;
+				goto out;
+			}
 		}
 	} else
-		ret = lo_receive(lo, bio, lo->lo_blocksize, pos);
+		ret = lo->lo_parser->bio(lo, bio);
 
 out:
 	return ret;
@@ -541,7 +553,7 @@ out:
 }
 
 struct switch_request {
-	struct file *file;
+	struct lo_file *lo_file;
 	struct completion wait;
 };
 
@@ -601,14 +613,14 @@ static int loop_thread(void *data)
  * First it needs to flush existing IO, it does this by sending a magic
  * BIO down the pipe. The completion of this BIO does the actual switch.
  */
-static int loop_switch(struct loop_device *lo, struct file *file)
+static int loop_switch(struct loop_device *lo, struct lo_file *lo_file)
 {
 	struct switch_request w;
 	struct bio *bio = bio_alloc(GFP_KERNEL, 0);
 	if (!bio)
 		return -ENOMEM;
 	init_completion(&w.wait);
-	w.file = file;
+	w.lo_file = lo_file;
 	bio->bi_private = &w;
 	bio->bi_bdev = NULL;
 	loop_make_request(lo->lo_queue, bio);
@@ -633,90 +645,230 @@ static int loop_flush(struct loop_device *lo)
  */
 static void do_loop_switch(struct loop_device *lo, struct switch_request *p)
 {
-	struct file *file = p->file;
-	struct file *old_file = lo->lo_backing_file;
+
+	/* if no new lo_file, only flush of queued bios requested */
+	if (!p->lo_file)
+		goto out;
+
+	lo->lo_file = p->lo_file;
+out:
+	complete(&p->wait);
+}
+
+static int loop_match_parser(struct loop_device *lo, struct lo_file *lo_file)
+{
+	struct loop_parser *parser;
+	struct module *owner;
+	int ret = 0;
+
+	mutex_lock(&loop_parsers_mutex);
+	list_for_each_entry(parser, &loop_parsers, list) {
+		owner = parser->owner;
+
+		if (!try_module_get(owner))
+			continue;
+
+		ret = parser->init(lo, lo_file);
+		if (!ret) {
+			lo->lo_parser = parser;
+			break;
+		}
+
+		module_put(owner);
+
+		if (ret == -EPERM)
+			break;
+	}
+	mutex_unlock(&loop_parsers_mutex);
+
+	/*
+	 * raw_parser will always bind if no other parsers do,
+	 * unless a parser noted that the file is supported, but
+	 * losetup should be denied.
+	 */
+	if(!lo->lo_parser && ret != -EPERM) {
+		lo->lo_parser = &raw_parser;
+		lo->lo_parser->init(lo, lo_file);
+		ret = 0;
+	}
+	return ret;
+}
+
+static inline int is_loop_device(struct file *file)
+{
+	struct inode *i = file->f_mapping->host;
+
+	return i && S_ISBLK(i->i_mode) && MAJOR(i->i_rdev) == LOOP_MAJOR;
+}
+
+static struct lo_file *loop_lo_file_alloc(struct block_device *bdev,
+					  unsigned int arg)
+{
 	struct address_space *mapping;
+	struct lo_file *lo_file;
+	struct file *file, *f;
+	unsigned blocksize;
+	struct inode *inode;
+	int lo_file_flags = 0;
+	int error = 0;
 
-	/* if no new file, only flush of queued bios requested */
+	/* This is safe, since we have a reference from open(). */
+	__module_get(THIS_MODULE);
+
+	file = fget(arg);
 	if (!file)
-		goto out;
+		return ERR_PTR(-EBADF);
+
+	/* Avoid recursion */
+	f = file;
+	while (is_loop_device(f)) {
+		struct loop_device *l;
+
+		if (f->f_mapping->host->i_bdev == bdev) {
+			error = -EBUSY;
+			goto out;
+		}
+
+		l = f->f_mapping->host->i_bdev->bd_disk->private_data;
+		if (l->lo_state == Lo_unbound) {
+			error = -EINVAL;
+			goto out;
+		}
+		f = l->lo_file->file;
+	}
 
 	mapping = file->f_mapping;
-	mapping_set_gfp_mask(old_file->f_mapping, lo->old_gfp_mask);
-	lo->lo_backing_file = file;
-	lo->lo_blocksize = S_ISBLK(mapping->host->i_mode) ?
-		mapping->host->i_bdev->bd_block_size : PAGE_SIZE;
-	lo->old_gfp_mask = mapping_gfp_mask(mapping);
-	mapping_set_gfp_mask(mapping, lo->old_gfp_mask & ~(__GFP_IO|__GFP_FS));
+	inode = mapping->host;
+
+	if (!S_ISREG(inode->i_mode) &&
+	    !S_ISBLK(inode->i_mode)) {
+		error = -EINVAL;
+		goto out;
+	}
+
+	if (mapping->a_ops->write_begin)
+		lo_file_flags |= LO_FILE_FLAGS_USE_AOPS;
+
+	blocksize = S_ISBLK(inode->i_mode) ?
+		inode->i_bdev->bd_block_size : PAGE_SIZE;
+
+	lo_file = kzalloc(sizeof(*lo_file), GFP_KERNEL);
+	if (!lo_file) {
+		error = -ENOMEM;
+		goto out;
+	}
+
+	lo_file->blocksize = blocksize;
+	lo_file->flags = lo_file_flags;
+	lo_file->file = file;
+	lo_file->old_gfp_mask = mapping_gfp_mask(mapping);
+	mapping_set_gfp_mask(mapping,
+			     lo_file->old_gfp_mask &
+			     ~(__GFP_IO|__GFP_FS));
+	atomic_inc(&lo_file->ref);
+	return lo_file;
+
 out:
-	complete(&p->wait);
+	fput(file);
+	return ERR_PTR(error);
 }
 
+static void loop_lo_file_put(struct loop_parser *parser,
+			     struct lo_file *lo_file)
+{
+	gfp_t gfp;
+	struct file *file = lo_file->file;
+
+	if (atomic_dec_and_test(&lo_file->ref)) {
+		if (parser) {
+			parser->release(lo_file);
+			module_put(parser->owner);
+		}
+
+		gfp = lo_file->old_gfp_mask;
+		kfree(lo_file);
+		mapping_set_gfp_mask(file->f_mapping, gfp);
+		fput(file);
+
+		/* This is safe: open() is still holding a reference. */
+		module_put(THIS_MODULE);
+	}
+}
 
 /*
- * loop_change_fd switched the backing store of a loopback device to
- * a new file. This is useful for operating system installers to free up
- * the original file and in High Availability environments to switch to
- * an alternative location for the content in case of server meltdown.
- * This can only work if the loop device is used read-only, and if the
- * new backing store is the same size and type as the old backing store.
+ * loop_change_fd switches the backing store of a loopback device to
+ * a new file. This has two use scenarios -
+ * a) For operating system installers to free up the original file
+ *    and in High Availability environments to switch to an alternate
+ *    location for the content in case of server meltdown. This can
+ *    only work if the loop device is used read-only, and if the
+ *    new backing store is the same size and type as the old
+ *    backing store.
+ * b) To mount COW/differencing disks for file formats supporting
+ *    such. The parent image needs to be set_fd'd first, and the
+ *    COW image can be switched to.
  */
 static int loop_change_fd(struct loop_device *lo, struct block_device *bdev,
 			  unsigned int arg)
 {
-	struct file	*file, *old_file;
-	struct inode	*inode;
-	int		error;
+	struct lo_file *lo_file, *old_lo_file;
+	int error = 0;
 
-	error = -ENXIO;
-	if (lo->lo_state != Lo_bound)
+	if (lo->lo_state != Lo_bound) {
+		error = -ENXIO;
 		goto out;
+	}
 
-	/* the loop device has to be read-only */
-	error = -EINVAL;
-	if (!(lo->lo_flags & LO_FLAGS_READ_ONLY))
+	old_lo_file = lo->lo_file;
+	lo_file = loop_lo_file_alloc(bdev, arg);
+	if (IS_ERR(lo_file)) {
+		error = PTR_ERR(lo_file);
 		goto out;
+	}
 
-	error = -EBADF;
-	file = fget(arg);
-	if (!file)
-		goto out;
-
-	inode = file->f_mapping->host;
-	old_file = lo->lo_backing_file;
-
-	error = -EINVAL;
-
-	if (!S_ISREG(inode->i_mode) && !S_ISBLK(inode->i_mode))
-		goto out_putf;
+	/*
+	 * Policy and parser-specific logic changes
+	 * happen here. Note, after this call has
+	 * finished, the parser should be able to
+	 * deal with I/O going to old lo_file as
+	 * part of the flush happening during switch.
+	 */
+	error = lo->lo_parser->change(lo, lo_file);
+	if (error)
+		goto out_putlf;
 
-	/* size of the new backing store needs to be the same */
-	if (get_loop_size(lo, file) != get_loop_size(lo, old_file))
-		goto out_putf;
+	/*
+	 * On an old-style fd-switch, the old lo_file
+	 * would be going away, and this would decrement
+	 * its parsers mod count - so we increment. In
+	 * the COW case, the parent lo_file will get
+	 * loop_lo_file_put called on it from the
+	 * parser's release call, so we will still be
+	 * balanced.
+	 */
+	__module_get(lo->lo_parser->owner);
 
-	/* and ... switch */
-	error = loop_switch(lo, file);
+	/* Perform flush + switch. */
+	error = loop_switch(lo, lo_file);
 	if (error)
-		goto out_putf;
+		goto out_putlf;
+
+	/*
+	 * Possibly free up - because it could be retained
+	 * for COW/differencing disk purposes.
+	 */
+	loop_lo_file_put(lo->lo_parser, old_lo_file);
 
-	fput(old_file);
 	if (max_part > 0)
 		ioctl_by_bdev(bdev, BLKRRPART, 0);
 	return 0;
 
- out_putf:
-	fput(file);
- out:
+out_putlf:
+	loop_lo_file_put(lo->lo_parser, lo_file);
+out:
 	return error;
 }
 
-static inline int is_loop_device(struct file *file)
-{
-	struct inode *i = file->f_mapping->host;
-
-	return i && S_ISBLK(i->i_mode) && MAJOR(i->i_rdev) == LOOP_MAJOR;
-}
-
 /* loop sysfs attributes */
 
 static ssize_t loop_attr_show(struct device *dev, char *page,
@@ -744,8 +896,8 @@ static ssize_t loop_attr_backing_file_show(struct loop_device *lo, char *buf)
 	char *p = NULL;
 
 	spin_lock_irq(&lo->lo_lock);
-	if (lo->lo_backing_file)
-		p = d_path(&lo->lo_backing_file->f_path, buf, PAGE_SIZE - 1);
+	if (lo->lo_file->file)
+		p = d_path(&lo->lo_file->file->f_path, buf, PAGE_SIZE - 1);
 	spin_unlock_irq(&lo->lo_lock);
 
 	if (IS_ERR_OR_NULL(p))
@@ -810,87 +962,50 @@ static void loop_sysfs_exit(struct loop_device *lo)
 static int loop_set_fd(struct loop_device *lo, fmode_t mode,
 		       struct block_device *bdev, unsigned int arg)
 {
-	struct file	*file, *f;
-	struct inode	*inode;
-	struct address_space *mapping;
-	unsigned lo_blocksize;
 	int		lo_flags = 0;
-	int		error;
+	int		lo_file_flags = 0;
+	int		error = 0;
 	loff_t		size;
 
-	/* This is safe, since we have a reference from open(). */
-	__module_get(THIS_MODULE);
-
-	error = -EBADF;
-	file = fget(arg);
-	if (!file)
+	if (lo->lo_state != Lo_unbound) {
+		error = -EBUSY;
 		goto out;
-
-	error = -EBUSY;
-	if (lo->lo_state != Lo_unbound)
-		goto out_putf;
-
-	/* Avoid recursion */
-	f = file;
-	while (is_loop_device(f)) {
-		struct loop_device *l;
-
-		if (f->f_mapping->host->i_bdev == bdev)
-			goto out_putf;
-
-		l = f->f_mapping->host->i_bdev->bd_disk->private_data;
-		if (l->lo_state == Lo_unbound) {
-			error = -EINVAL;
-			goto out_putf;
-		}
-		f = l->lo_backing_file;
 	}
 
-	mapping = file->f_mapping;
-	inode = mapping->host;
+	lo->lo_file = loop_lo_file_alloc(bdev, arg);
+	if (IS_ERR(lo->lo_file)) {
+		error = PTR_ERR(lo->lo_file);
+		lo->lo_file = NULL;
+		goto out;
+	}
 
-	if (!(file->f_mode & FMODE_WRITE))
+	if (!(lo->lo_file->file->f_mode & FMODE_WRITE))
 		lo_flags |= LO_FLAGS_READ_ONLY;
 
-	error = -EINVAL;
-	if (S_ISREG(inode->i_mode) || S_ISBLK(inode->i_mode)) {
-		const struct address_space_operations *aops = mapping->a_ops;
-
-		if (aops->write_begin)
-			lo_flags |= LO_FLAGS_USE_AOPS;
-		if (!(lo_flags & LO_FLAGS_USE_AOPS) && !file->f_op->write)
-			lo_flags |= LO_FLAGS_READ_ONLY;
-
-		lo_blocksize = S_ISBLK(inode->i_mode) ?
-			inode->i_bdev->bd_block_size : PAGE_SIZE;
+	if (!(lo_file_flags & LO_FILE_FLAGS_USE_AOPS) &&
+	    !lo->lo_file->file->f_op->write)
+		lo_flags |= LO_FLAGS_READ_ONLY;
 
-		error = 0;
-	} else {
-		goto out_putf;
-	}
+	lo->lo_flags = lo_flags;
+	lo->transfer = transfer_none;
+	lo->lo_sizelimit = 0;
 
-	size = get_loop_size(lo, file);
+	error = loop_match_parser(lo, lo->lo_file);
+	if (error)
+		goto out_putlf;
+	size = lo->lo_parser->size(lo);
 
 	if ((loff_t)(sector_t)size != size) {
 		error = -EFBIG;
-		goto out_putf;
+		goto out_putlf;
 	}
 
 	if (!(mode & FMODE_WRITE))
 		lo_flags |= LO_FLAGS_READ_ONLY;
 
-	set_device_ro(bdev, (lo_flags & LO_FLAGS_READ_ONLY) != 0);
-
-	lo->lo_blocksize = lo_blocksize;
 	lo->lo_device = bdev;
-	lo->lo_flags = lo_flags;
-	lo->lo_backing_file = file;
-	lo->transfer = transfer_none;
 	lo->ioctl = NULL;
-	lo->lo_sizelimit = 0;
-	lo->old_gfp_mask = mapping_gfp_mask(mapping);
-	mapping_set_gfp_mask(mapping, lo->old_gfp_mask & ~(__GFP_IO|__GFP_FS));
-
+	set_device_ro(bdev, (lo_flags & LO_FLAGS_READ_ONLY) != 0);
 	bio_list_init(&lo->lo_bio_list);
 
 	/*
@@ -900,7 +1015,8 @@ static int loop_set_fd(struct loop_device *lo, fmode_t mode,
 	blk_queue_make_request(lo->lo_queue, loop_make_request);
 	lo->lo_queue->queuedata = lo;
 
-	if (!(lo_flags & LO_FLAGS_READ_ONLY) && file->f_op->fsync)
+	if (!(lo_flags & LO_FLAGS_READ_ONLY) &&
+	    lo->lo_file->file->f_op->fsync)
 		blk_queue_flush(lo->lo_queue, REQ_FLUSH);
 
 	set_capacity(lo->lo_disk, size);
@@ -909,7 +1025,7 @@ static int loop_set_fd(struct loop_device *lo, fmode_t mode,
 	/* let user-space know about the new size */
 	kobject_uevent(&disk_to_dev(bdev->bd_disk)->kobj, KOBJ_CHANGE);
 
-	set_blocksize(bdev, lo_blocksize);
+	set_blocksize(bdev, lo->lo_file->blocksize);
 
 	lo->lo_thread = kthread_create(loop_thread, lo, "loop%d",
 						lo->lo_number);
@@ -927,19 +1043,16 @@ out_clr:
 	loop_sysfs_exit(lo);
 	lo->lo_thread = NULL;
 	lo->lo_device = NULL;
-	lo->lo_backing_file = NULL;
-	lo->lo_flags = 0;
 	set_capacity(lo->lo_disk, 0);
 	invalidate_bdev(bdev);
 	bd_set_size(bdev, 0);
 	kobject_uevent(&disk_to_dev(bdev->bd_disk)->kobj, KOBJ_CHANGE);
-	mapping_set_gfp_mask(mapping, lo->old_gfp_mask);
 	lo->lo_state = Lo_unbound;
- out_putf:
-	fput(file);
- out:
-	/* This is safe: open() is still holding a reference. */
-	module_put(THIS_MODULE);
+out_putlf:
+	loop_lo_file_put(lo->lo_parser, lo->lo_file);
+	lo->lo_parser = NULL;
+	lo->lo_file = NULL;
+out:
 	return error;
 }
 
@@ -982,8 +1095,8 @@ loop_init_xfer(struct loop_device *lo, struct loop_func_table *xfer,
 
 static int loop_clr_fd(struct loop_device *lo, struct block_device *bdev)
 {
-	struct file *filp = lo->lo_backing_file;
-	gfp_t gfp = lo->old_gfp_mask;
+	struct lo_file *lo_file;
+	struct loop_parser *parser;
 
 	if (lo->lo_state != Lo_bound)
 		return -ENXIO;
@@ -991,7 +1104,7 @@ static int loop_clr_fd(struct loop_device *lo, struct block_device *bdev)
 	if (lo->lo_refcnt > 1)	/* we needed one fd for the ioctl */
 		return -EBUSY;
 
-	if (filp == NULL)
+	if (lo->lo_file == NULL)
 		return -EINVAL;
 
 	spin_lock_irq(&lo->lo_lock);
@@ -1001,7 +1114,10 @@ static int loop_clr_fd(struct loop_device *lo, struct block_device *bdev)
 	kthread_stop(lo->lo_thread);
 
 	spin_lock_irq(&lo->lo_lock);
-	lo->lo_backing_file = NULL;
+	parser = lo->lo_parser;
+	lo->lo_parser = NULL;
+	lo_file = lo->lo_file;
+	lo->lo_file = NULL;
 	spin_unlock_irq(&lo->lo_lock);
 
 	loop_release_xfer(lo);
@@ -1026,10 +1142,8 @@ static int loop_clr_fd(struct loop_device *lo, struct block_device *bdev)
 		/* let user-space know about this change */
 		kobject_uevent(&disk_to_dev(bdev->bd_disk)->kobj, KOBJ_CHANGE);
 	}
-	mapping_set_gfp_mask(filp->f_mapping, gfp);
+
 	lo->lo_state = Lo_unbound;
-	/* This is safe: open() is still holding a reference. */
-	module_put(THIS_MODULE);
 	if (max_part > 0 && bdev)
 		ioctl_by_bdev(bdev, BLKRRPART, 0);
 	mutex_unlock(&lo->lo_ctl_mutex);
@@ -1039,7 +1153,7 @@ static int loop_clr_fd(struct loop_device *lo, struct block_device *bdev)
 	 * lock dependency possibility warning as fput can take
 	 * bd_mutex which is usually taken before lo_ctl_mutex.
 	 */
-	fput(filp);
+	loop_lo_file_put(parser, lo_file);
 	return 0;
 }
 
@@ -1115,13 +1229,13 @@ loop_set_status(struct loop_device *lo, const struct loop_info64 *info)
 static int
 loop_get_status(struct loop_device *lo, struct loop_info64 *info)
 {
-	struct file *file = lo->lo_backing_file;
 	struct kstat stat;
 	int error;
 
 	if (lo->lo_state != Lo_bound)
 		return -ENXIO;
-	error = vfs_getattr(file->f_path.mnt, file->f_path.dentry, &stat);
+	error = vfs_getattr(lo->lo_file->file->f_path.mnt,
+                            lo->lo_file->file->f_path.dentry, &stat);
 	if (error)
 		return error;
 	memset(info, 0, sizeof(*info));
@@ -1551,6 +1665,34 @@ MODULE_PARM_DESC(max_part, "Maximum number of partitions per loop device");
 MODULE_LICENSE("GPL");
 MODULE_ALIAS_BLOCKDEV_MAJOR(LOOP_MAJOR);
 
+int loop_register_parser(struct loop_parser *parser)
+{
+	if (!parser->name ||
+	    !parser->init ||
+	    !parser->release ||
+	    !parser->sync ||
+	    !parser->size ||
+	    !parser->change ||
+	    !parser->bio)
+		return -EINVAL;
+
+	mutex_lock(&loop_parsers_mutex);
+	list_add_tail(&parser->list, &loop_parsers);
+	mutex_unlock(&loop_parsers_mutex);
+	return 0;
+}
+
+int loop_unregister_parser(struct loop_parser *parser)
+{
+	mutex_lock(&loop_parsers_mutex);
+	list_del(&parser->list);
+	mutex_unlock(&loop_parsers_mutex);
+	return 0;
+}
+
+EXPORT_SYMBOL(loop_register_parser);
+EXPORT_SYMBOL(loop_unregister_parser);
+
 int loop_register_transfer(struct loop_func_table *funcs)
 {
 	unsigned int n = funcs->number;
@@ -1788,6 +1930,82 @@ static struct miscdevice loop_misc = {
 MODULE_ALIAS_MISCDEV(LOOP_CTRL_MINOR);
 MODULE_ALIAS("devname:loop-control");
 
+static int raw_init(struct loop_device *lo, struct lo_file *lo_file)
+{
+	printk(KERN_INFO "%s: raw %lld bytes\n",
+	       lo->lo_disk->disk_name,
+	       i_size_read(lo_file->file->f_mapping->host));
+	return 0;
+}
+
+static void raw_release(struct lo_file *lo_file)
+{
+}
+
+static loff_t raw_size(struct loop_device *lo)
+{
+	loff_t size, offset, loopsize;
+
+	/* Compute loopsize in bytes */
+	size = i_size_read(lo->lo_file->file->f_mapping->host);
+	offset = lo->lo_offset;
+	loopsize = size - offset;
+	if (lo->lo_sizelimit > 0 && lo->lo_sizelimit < loopsize)
+		loopsize = lo->lo_sizelimit;
+
+	/*
+	 * Unfortunately, if we want to do I/O on the device,
+	 * the number of 512-byte sectors has to fit into a sector_t.
+	 */
+	return size >> 9;
+}
+
+static int raw_bio(struct loop_device *lo, struct bio *bio)
+{
+	if (bio_rw(bio) == WRITE)
+		return loop_send(lo, lo->lo_file, bio,
+				 ((loff_t) bio->bi_sector << 9) +
+				 lo->lo_offset, lo->transfer);
+	else
+		return loop_recv(lo, lo->lo_file, bio,
+				 ((loff_t) bio->bi_sector << 9) +
+				 lo->lo_offset, lo->transfer);
+}
+
+static int raw_sync(struct loop_device *lo)
+{
+	return loop_sync(lo, lo->lo_file);
+}
+
+static int raw_change(struct loop_device *lo, struct lo_file *lo_file)
+{
+	/* the loop device has to be read-only */
+	if (!(lo->lo_flags & LO_FLAGS_READ_ONLY))
+		return -EINVAL;
+
+	/*
+	 * (File) size of the new backing store needs to be the same.
+	 * This is an extremely basic check.
+	 */
+	if (i_size_read(lo->lo_file->file->f_mapping->host) !=
+	    i_size_read(lo_file->file->f_mapping->host))
+		return -EINVAL;
+
+	return 0;
+}
+
+static struct loop_parser raw_parser =
+{
+	.name = "raw",
+	.init = raw_init,
+	.release = raw_release,
+	.sync = raw_sync,
+	.size = raw_size,
+	.bio = raw_bio,
+	.change = raw_change,
+	.owner = THIS_MODULE
+};
+
 static int __init loop_init(void)
 {
 	int i, nr;
diff --git a/include/linux/loop.h b/include/linux/loop.h
index 683d698..323c20d 100644
--- a/include/linux/loop.h
+++ b/include/linux/loop.h
@@ -28,12 +28,33 @@ enum {
 
 struct loop_func_table;
 
+/*
+ * Loop file flags
+ */
+enum {
+	LO_FILE_FLAGS_USE_AOPS	= 1,
+};
+
+struct lo_file {
+	int		flags;
+	struct file *	file;
+	unsigned	blocksize;
+	gfp_t		old_gfp_mask;
+	void *		parser_priv;
+	atomic_t	ref;
+};
+
 struct loop_device {
 	int		lo_number;
 	int		lo_refcnt;
+
+	/* Raw parser use only. */
 	loff_t		lo_offset;
 	loff_t		lo_sizelimit;
+
 	int		lo_flags;
+
+	/* TBD: Push crypto specifics into raw parser. */
 	int		(*transfer)(struct loop_device *, int cmd,
 				    struct page *raw_page, unsigned raw_off,
 				    struct page *loop_page, unsigned loop_off,
@@ -43,17 +64,14 @@ struct loop_device {
 	char		lo_encrypt_key[LO_KEY_SIZE];
 	int		lo_encrypt_key_size;
 	struct loop_func_table *lo_encryption;
+	struct loop_parser *lo_parser;
 	__u32           lo_init[2];
 	uid_t		lo_key_owner;	/* Who set the key */
-	int		(*ioctl)(struct loop_device *, int cmd, 
-				 unsigned long arg); 
+	int		(*ioctl)(struct loop_device *, int cmd,
+				 unsigned long arg);
 
-	struct file *	lo_backing_file;
 	struct block_device *lo_device;
-	unsigned	lo_blocksize;
-	void		*key_data; 
-
-	gfp_t		old_gfp_mask;
+	void		*key_data;
 
 	spinlock_t		lo_lock;
 	struct bio_list		lo_bio_list;
@@ -64,6 +82,7 @@ struct loop_device {
 
 	struct request_queue	*lo_queue;
 	struct gendisk		*lo_disk;
+	struct lo_file		*lo_file;
 };
 
 #endif /* __KERNEL__ */
@@ -73,7 +92,6 @@ struct loop_device {
  */
 enum {
 	LO_FLAGS_READ_ONLY	= 1,
-	LO_FLAGS_USE_AOPS	= 2,
 	LO_FLAGS_AUTOCLEAR	= 4,
 };
 
@@ -128,14 +146,16 @@ struct loop_info64 {
 #define LO_CRYPT_CRYPTOAPI	18
 #define MAX_LO_CRYPT		20
 
+typedef int (*loop_xfer_t)(struct loop_device *lo, int cmd,
+			struct page *raw_page, unsigned raw_off,
+			struct page *loop_page, unsigned loop_off,
+			int size, sector_t real_block);
+
 #ifdef __KERNEL__
 /* Support for loadable transfer modules */
 struct loop_func_table {
 	int number;	/* filter type */ 
-	int (*transfer)(struct loop_device *lo, int cmd,
-			struct page *raw_page, unsigned raw_off,
-			struct page *loop_page, unsigned loop_off,
-			int size, sector_t real_block);
+	loop_xfer_t transfer;
 	int (*init)(struct loop_device *, const struct loop_info64 *); 
 	/* release is called from loop_unregister_transfer or clr_fd */
 	int (*release)(struct loop_device *); 
@@ -146,6 +166,27 @@ struct loop_func_table {
 int loop_register_transfer(struct loop_func_table *funcs);
 int loop_unregister_transfer(int number); 
 
+/* Support for loadable parser modules */
+struct loop_parser {
+	struct list_head list;
+	const char *name;
+	int (*init)(struct loop_device *lo, struct lo_file *lo_file);
+	void (*release)(struct lo_file *lo_file);
+	int (*sync)(struct loop_device *lo);
+	loff_t (*size)(struct loop_device *lo);
+	int (*bio)(struct loop_device *lo, struct bio *bio);
+	int (*change)(struct loop_device *lo, struct lo_file *lo_file);
+	struct module *owner;
+};
+
+/* Interface between loop and loop parser modules. */
+int loop_register_parser(struct loop_parser *parser);
+int loop_unregister_parser(struct loop_parser *parser);
+int loop_send(struct loop_device *lo, struct lo_file *lo_file,
+	      struct bio *bio, loff_t pos, loop_xfer_t transfer);
+int loop_recv(struct loop_device *lo, struct lo_file *lo_file,
+	      struct bio *bio, loff_t pos, loop_xfer_t transfer);
+int loop_sync(struct loop_device *lo, struct lo_file *lo_file);
 #endif
 /*
  * IOCTL commands --- we will commandeer 0x4C ('L')
-- 
1.7.7

