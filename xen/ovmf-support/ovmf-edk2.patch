Index: PlatformPei/Platform.c
===================================================================
--- PlatformPei/Platform.c	(revision 11547)
+++ PlatformPei/Platform.c	(working copy)
@@ -1,6 +1,8 @@
 /**@file
   Platform PEI driver
 
+  Modified to support Xen HVM - Andrei Warkentin <andreiw@motorola.com>
+
   Copyright (c) 2006 - 2010, Intel Corporation. All rights reserved.<BR>
   This program and the accompanying materials
   are licensed and made available under the terms and conditions of the BSD License
@@ -75,6 +77,24 @@
 
 
 VOID
+AddReservedMemoryBaseSizeHob (
+  EFI_PHYSICAL_ADDRESS        MemoryBase,
+  UINT64                      MemorySize
+  )
+{
+  BuildResourceDescriptorHob (
+    EFI_RESOURCE_MEMORY_RESERVED,
+      EFI_RESOURCE_ATTRIBUTE_PRESENT     |
+      EFI_RESOURCE_ATTRIBUTE_INITIALIZED |
+      EFI_RESOURCE_ATTRIBUTE_UNCACHEABLE |
+      EFI_RESOURCE_ATTRIBUTE_TESTED,
+    MemoryBase,
+    MemorySize
+    );
+}
+
+
+VOID
 AddIoMemoryRangeHob (
   EFI_PHYSICAL_ADDRESS        MemoryBase,
   EFI_PHYSICAL_ADDRESS        MemoryLimit
@@ -147,7 +167,8 @@
 
 VOID
 MemMapInitialization (
-  EFI_PHYSICAL_ADDRESS  TopOfMemory
+  EFI_PHYSICAL_ADDRESS  TopOfMemory,
+  BOOLEAN               XenHvm
   )
 {
   //
@@ -162,24 +183,46 @@
   //
   // Add PCI IO Port space available for PCI resource allocations.
   //
-  BuildResourceDescriptorHob (
-    EFI_RESOURCE_IO,
+
+  if (XenHvm) {
+    BuildResourceDescriptorHob (
+      EFI_RESOURCE_IO,
       EFI_RESOURCE_ATTRIBUTE_PRESENT     |
       EFI_RESOURCE_ATTRIBUTE_INITIALIZED,
-    0x1000,
-    0xF000
-    );
+      0xC000,
+      0x10000
+      );
+  } else {
+    BuildResourceDescriptorHob (
+      EFI_RESOURCE_IO,
+      EFI_RESOURCE_ATTRIBUTE_PRESENT     |
+      EFI_RESOURCE_ATTRIBUTE_INITIALIZED,
+      0x1000,
+      0xF000
+      );
+  }
 
   //
   // Add PCI MMIO space available to PCI resource allocations
   //
-  if (TopOfMemory < BASE_2GB) {
-    AddIoMemoryBaseSizeHob (BASE_2GB, 0xFEC00000 - BASE_2GB);
+
+  if (XenHvm) {
+    AddIoMemoryBaseSizeHob (TopOfMemory, 0xFC000000 - TopOfMemory);
   } else {
-    AddIoMemoryBaseSizeHob (TopOfMemory, 0xFEC00000 - TopOfMemory);
+    if (TopOfMemory < BASE_2GB) {
+      AddIoMemoryBaseSizeHob (BASE_2GB, 0xFEC00000 - BASE_2GB);
+    } else {
+      AddIoMemoryBaseSizeHob (TopOfMemory, 0xFEC00000 - TopOfMemory);
+    }
   }
 
   //
+  // Reserve away HVMLOADER reserved memory [0xFC000000,0xFD000000).
+  // This needs to match HVMLOADER RESERVED_MEMBASE/RESERVED_MEMSIZE.
+  //
+  AddReservedMemoryBaseSizeHob (0xFC000000, 0x1000000);
+
+  //
   // Local APIC range
   //
   AddIoMemoryBaseSizeHob (0xFEC80000, SIZE_512KB);
@@ -209,11 +252,6 @@
   // Build the CPU hob with 36-bit addressing and 16-bits of IO space.
   //
   BuildCpuHob (36, 16);
-
-  //
-  // Set the PM I/O base address to 0x400
-  //
-  PciAndThenOr32 (PCI_LIB_ADDRESS (0, 1, 3, 0x40), (UINT32) ~0xfc0, 0x400);
 }
 
 
@@ -279,6 +317,34 @@
 
 
 /**
+  Figures out if we are running inside Xen HVM.
+
+  @return TRUE     Running under Xen HVM.
+
+**/
+BOOLEAN
+IsXen (
+  VOID
+  )
+{
+  UINT32 Index;
+  UINT8 Signature[13];
+
+  for (Index = 0x40000000; Index < 0x40010000; Index += 0x100) {
+    AsmCpuid (Index, NULL, (UINT32 *) &Signature[0],
+              (UINT32 *) &Signature[4],
+              (UINT32 *) &Signature[8]);
+    Signature[12] = '\0';
+
+    if (!AsciiStrCmp ((CHAR8 *) Signature, "XenVMMXenVMM")) {
+      return TRUE;
+    }
+  }
+
+  return FALSE;
+}
+
+/**
   Perform Platform PEI initialization.
 
   @param  FileHandle      Handle of the file being invoked.
@@ -295,9 +361,15 @@
   )
 {
   EFI_PHYSICAL_ADDRESS  TopOfMemory;
+  BOOLEAN XenHvm;
 
   DEBUG ((EFI_D_ERROR, "Platform PEIM Loaded\n"));
 
+  XenHvm = IsXen ();
+  if (XenHvm) {
+    DEBUG ((EFI_D_ERROR, "Detected Xen HVM\n"));
+  }
+
   DebugDumpCmos ();
 
   TopOfMemory = MemDetect ();
@@ -306,7 +378,7 @@
 
   PeiFvInitialization ();
 
-  MemMapInitialization (TopOfMemory);
+  MemMapInitialization (TopOfMemory, XenHvm);
 
   MiscInitialization ();
 
Index: Library/AcpiTimerLib/AcpiTimerLib.c
===================================================================
--- Library/AcpiTimerLib/AcpiTimerLib.c	(revision 11547)
+++ Library/AcpiTimerLib/AcpiTimerLib.c	(working copy)
@@ -1,25 +1,36 @@
 /** @file
   ACPI Timer implements one instance of Timer Library.
 
+  Modified to support Xen HVM - Andrei Warkentin <andreiw@motorola.com>
+
   Copyright (c) 2008, Intel Corporation. All rights reserved.<BR>
   This program and the accompanying materials are
   licensed and made available under the terms and conditions of the BSD License
   which accompanies this distribution.  The full text of the license may be found at
   http://opensource.org/licenses/bsd-license.php
-  
+
   THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
   WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
 
-**/ 
+**/
 
 #include <Base.h>
 #include <Library/TimerLib.h>
 #include <Library/BaseLib.h>
 #include <Library/IoLib.h>
 #include <Library/PciLib.h>
+#include <Library/DebugLib.h>
 
+//
+// PIIX4 usual base BAR.
+//
+
+UINT32 TimerBaseBar = 0x401;
+
+#define PCI_BAR_IO             0x1
 #define ACPI_TIMER_FREQUENCY   3579545
 #define ACPI_TIMER_COUNT_SIZE  0x01000000
+#define ACPI_TIMER_OFFSET      0x8
 
 /**
   The constructor function enables ACPI IO space.
@@ -41,12 +52,22 @@
   Device = 1;
   // Device = 7;
 
+  if (PciRead8 (PCI_LIB_ADDRESS (0,Device,3,0x80)) & 1) {
+    TimerBaseBar = PciRead32 (PCI_LIB_ADDRESS (0,Device,3,0x40));
+    ASSERT(TimerBaseBar & PCI_BAR_IO);
+    TimerBaseBar &= ~PCI_BAR_IO;
+  } else {
+    PciAndThenOr32 (PCI_LIB_ADDRESS (0,Device,3,0x40),
+                    (UINT32) ~0xfc0, TimerBaseBar);
+    PciOr8         (PCI_LIB_ADDRESS (0,Device,3,0x04), 0x01);
+  }
+
   //
   // ACPI Timer enable is in Bus 0, Device ?, Function 3
   //
-  PciOr8         (PCI_LIB_ADDRESS (0,Device,3,0x04), 0x01);
-  PciAndThenOr32 (PCI_LIB_ADDRESS (0,Device,3,0x40), (UINT32) ~0xfc0, 0x400);
-  PciOr8         (PCI_LIB_ADDRESS (0,Device,3,0x80), 0x01);  return RETURN_SUCCESS;
+
+  PciOr8         (PCI_LIB_ADDRESS (0,Device,3,0x80), 0x01);
+  return RETURN_SUCCESS;
 }
 
 /**
@@ -63,7 +84,7 @@
   VOID
   )
 {
-  return IoRead32 (0x408);
+  return IoRead32 (TimerBaseBar + ACPI_TIMER_OFFSET);
 }
 
 /**
